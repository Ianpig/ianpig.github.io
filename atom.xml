<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ian Chu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iandays.com/"/>
  <updated>2020-06-06T08:33:15.338Z</updated>
  <id>https://iandays.com/</id>
  
  <author>
    <name>Ian Chu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Immutable 對於 React 重要性</title>
    <link href="https://iandays.com/2020/04/29/immutable/"/>
    <id>https://iandays.com/2020/04/29/immutable/</id>
    <published>2020-04-29T04:39:42.000Z</published>
    <updated>2020-06-06T08:33:15.338Z</updated>
    
    <content type="html"><![CDATA[<p>Immutable 是我想寫很久的主題，前一份工作時，就大大的踩到關於 immutable 的雷，那時候依靠 google靠解掉這問題，但總該還債的，面試時候也被這個關內給卡到。現代網頁前端不只是要處理畫面更新，更多時間更會處理大量資料處理，不論是重複封裝、更新等等。React 更是把 Imutable 視為重要的開發準則。</p><p><img src="/images/immutable.png" alt="react immutable" title="react immutable"></p><h2 id="Immutable-mutable-data"><a href="#Immutable-mutable-data" class="headerlink" title="Immutable mutable data"></a>Immutable mutable data</h2><p>什麼是 Immutable、mutable，Immutable 稱之不可改變的，mutable 則相反是可以改變的。string、number 都是 immutable 的，簡單講就是不可更改的，舉個例子來說</p><ul><li>string immutable<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> <span class="built_in">str</span> = 'Hello, you!!';</span><br><span class="line"><span class="built_in">let</span> ianHello = <span class="built_in">str</span>;</span><br><span class="line">ianHello += 'ian';</span><br><span class="line"></span><br><span class="line"><span class="comment">// not changed</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>); <span class="comment">// Hello, you!!</span></span><br><span class="line">console.<span class="built_in">log</span>(ianHello); <span class="comment">// Hello, you!!ian</span></span><br></pre></td></tr></table></figure></li></ul><p>建立 ianHello 並使用 str 賦值，之後 ianHello 再重新賦值，並不會更動到 str，但 array 就不是這樣了。array 以及 object 使用 call by reference，淺拷貝的做法實現，白話一點講，就是會指導同一個記憶體位置，當你改動資料的時間，是針對指向的那一個記憶體去改，所以才會有連動的狀況。</p><ul><li>array mutable<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">'ian'</span>];</span><br><span class="line"><span class="keyword">let</span> copyName = names;</span><br><span class="line">copyName.push(<span class="string">'peter'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// changed</span></span><br><span class="line"><span class="built_in">console</span>.log(names); <span class="comment">// [ian, peter]</span></span><br><span class="line"><span class="built_in">console</span>.log(copyName); <span class="comment">// [ian, peter]</span></span><br></pre></td></tr></table></figure></li></ul><p>舉下方的例子來說，大致邏輯是依賴兩個陣列資料，驅使更新畫面更新的，呈現問題的使用方法是，點擊<code>複製按鈕</code>，同步兩邊的資料，再點擊任意一個清單的刪除，會發現兩邊畫面居然會連動。</p><iframe src="//codepen.io/chu1228/embed/wvMaKYw/?height=265&theme-id=light&default-tab=result" width="100%" height="350px" frameborder="0" loading="lazy" allowfullscreen></iframe><p>會產生問題的原因是，第一我複製資料的時候，讓兩個陣列變成指向同一個，所以才會兩邊連動畫面更新。</p><p>這大致上就是簡單的介紹 immutable 跟 mutable。</p><h2 id="React-Immutable"><a href="#React-Immutable" class="headerlink" title="React Immutable"></a>React Immutable</h2><p>React 有提到 state 的更新，都必須要是 immutable，當你有使用到 useState 或是 pureComponent、shouldComponentUpdate，你就會發現問題。下面範例就是 mutable 的更新 state。</p><iframe src="https://codesandbox.io/embed/elastic-flower-hlxd6?fontsize=14&hidenavigation=1&theme=dark" width="100%" height="350px" frameborder="0" loading="lazy" allowfullscreen></iframe><ul><li>mutable setState<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">value</span> = <span class="keyword">ref</span>.current.<span class="keyword">value</span>;</span><br><span class="line">names.push(<span class="keyword">value</span>);</span><br><span class="line">setNames(names);</span><br></pre></td></tr></table></figure></li></ul><p>結果就是沒辦法觸發 update component，因為 useState 就有自帶了 shallowEqual，同一個記憶體位置去比較有無更新，當然恆等於，所以這個案例，你怎們加入都無法更新畫面。</p><ul><li>immutable setState<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">set<span class="constructor">Names(<span class="params">names</span> =&gt; [<span class="operator">...</span><span class="params">names</span>, <span class="params">value</span>])</span></span><br></pre></td></tr></table></figure></li></ul><p><a href="https://reactjs.org/docs/optimizing-performance.html#the-power-of-not-mutating-data" target="_blank" rel="noopener" title="react optimizing-performance">react optimizing-performance</a></p><p><a href="https://redux.js.org/recipes/structuring-reducers/beyond-combinereducers#using-slice-reducers-with-immutablejs-objects" target="_blank" rel="noopener" title="redux reducers immutablejs">redux reducers immutablejs</a></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>記得剛轉前端工作的時候，被這問題卡了一下午，最後是靠 stackoverflow <code>slice</code>，來解決問題。以前遇到問題都是找到解法就結束了，但說實在沒搞懂原因，這樣遲早還是得回頭還債的。</p><p>勉勵一下自己，要求慎解啊！</p><p>一樣有問題、或是錯誤，歡迎留言，感謝閱讀。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Immutable 是我想寫很久的主題，前一份工作時，就大大的踩到關於 immutable 的雷，那時候依靠 google靠解掉這問題，但總該還債的，面試時候也被這個關內給卡到。現代網頁前端不只是要處理畫面更新，更多時間更會處理大量資料處理，不論是重複封裝、更新等等。Re
      
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://iandays.com/tags/javascript/"/>
    
      <category term="react.js" scheme="https://iandays.com/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>Puppeteer End-to-End Test React</title>
    <link href="https://iandays.com/2020/02/28/reactpuppeteer/"/>
    <id>https://iandays.com/2020/02/28/reactpuppeteer/</id>
    <published>2020-02-28T07:01:40.000Z</published>
    <updated>2020-04-03T02:46:49.652Z</updated>
    
    <content type="html"><![CDATA[<p>最近接觸某個重要專案，這專案很特別，每個狀態都會對應不同 config 有不同回應，網頁操作、業務邏輯十分之複雜，大概就像是 tree structure 一樣。我負責翻新頁面的 login flow，雖然我對改動邏輯掌握度高，但我滿擔心是否有沒看到的功能，會關聯到舊邏輯。</p><p>因為 use case 實在太繁雜了，每次都需要請 PM 或工程師手動測試，但又常常漏掉某些特殊情境，讓我有感而發，如果有跑測試就好了。有剛好有時間就來研究一下，要如何在 react 專案上跑 End to End Test。</p><p><img src="/images/puppeteerjest.png" alt="react puppeteerjest" title="react puppeteerjest"></p><h2 id="Puppeteer-介紹"><a href="#Puppeteer-介紹" class="headerlink" title="Puppeteer 介紹"></a>Puppeteer 介紹</h2><p>Puppeteer 是由 Chrome DevTools team 團隊開發的，它是一個 node library 工具，提供 API 讓我們控制 chrome 或 Chromium，並能以 headless chrome(chrome without chrome) 或正常模式執行。相對於 Selenium 專注在跨瀏覽器測試，Puppeteer 則是專注依賴 Chromium 並使用相關的 API 測試。</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol><li>產生 pdf 網頁快照。</li><li>render 頁面是基於 single page application 架構的頁面，並產生靜態內容。</li><li>自動化測試，input、鍵盤、UI 測試。</li><li>能夠使用最新的 chrome 環境進行測試。</li><li>產生頁面優化診斷。</li><li>測試 chrome extension。</li></ol><p><a href="https://developers.google.com/web/tools/puppeteer" target="_blank" rel="noopener" title="Puppeteer 官方介紹">Puppeteer 官方介紹</a></p><p>這個需要測試的頁面是以 React 開發，純 client side render，E2E 測試也需要處理 render SPA，適合我們的情境。</p><h2 id="安裝環境"><a href="#安裝環境" class="headerlink" title="安裝環境"></a>安裝環境</h2><p>建立資料夾，並安裝 package.json 、 puppeteer 等相關設定，接下來建立 js 檔案來使用 node 測試 puppeteer。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> <span class="keyword">test</span>-puppeteer</span><br><span class="line"><span class="keyword">cd</span> <span class="keyword">test</span>-puppeteer</span><br><span class="line">npm init -f</span><br><span class="line">npm install --<span class="keyword">save</span>-dev puppeteer dotenv</span><br><span class="line">touch <span class="keyword">test</span>.js</span><br></pre></td></tr></table></figure><h3 id="執行頁面載入-screenShot"><a href="#執行頁面載入-screenShot" class="headerlink" title="執行頁面載入 screenShot"></a>執行頁面載入 screenShot</h3><p>接下來嘗試載入 google 頁面，並且自動輸入值來使用 google search。首先我們需要 引入 puppeteer，並執行 puppeteer.launch 啟動 puppeteer，再利用 goto 來載入 <a href="https://google.com" target="_blank" rel="noopener">https://google.com</a> 頁面，接下來執行 screenshot 並命名 image 儲存位置，接下來 執行 node test，成功跑起來的話會發現新增了 screenshot_google.png ，打開來就是模擬 screenshot 的畫面。</p><p><a href="https://pptr.dev/#?product=Puppeteer&version=v2.1.1&show=outline" target="_blank" rel="noopener" title="Puppeteer 文件">Puppeteer 文件</a></p><ul><li>google.js<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">"puppeteer"</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">"https://google.com"</span>);</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123; path: <span class="string">"./screenshot_google.png"</span> &#125;);</span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><h3 id="模擬網頁互動"><a href="#模擬網頁互動" class="headerlink" title="模擬網頁互動"></a>模擬網頁互動</h3><p>使用 page.evaluate(function) 功能，可以讓我們執行 javascript，這邊我們會使用 javascript DOM selector 輸入搜尋框，並且點擊送出搜尋按鈕，再來 page.waitForNavigation() 等待頁面導覽完成，再來繼續執行 evaluate 點擊第一個搜尋結果的標題，最後執行 screenShot。</p><p>簡單講就是用 JavaScript 模擬使用者互動操作，來促使畫面更新變動，再截圖存取畫面。</p><p>page.evaluate 可以執行 javascript，直接以 selector 操作，這邊模擬輸入 coronavirus，並且執行 click submit，接下來 page.waitForNavigation 等待網頁導覽，接下來 page.evaluate 執行第一篇搜尋結果標題 click，最後執行 page.screenshot，截圖儲存並關閉。就完成了一個簡易的 puppeteer 測試。</p><ul><li>google.js<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name">async</span> () =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">  await page.evaluate(() =&gt; &#123;</span><br><span class="line">    document.querySelector(<span class="string">"input[type='search']"</span>).value = <span class="string">"coronavirus"</span><span class="comment">;</span></span><br><span class="line">    document.querySelector(<span class="string">"button[jsaction='click:.CLIENT']"</span>).click()<span class="comment">;</span></span><br><span class="line">  &#125;)<span class="comment">;</span></span><br><span class="line">  await page.waitForNavigation()<span class="comment">;</span></span><br><span class="line">  await page.evaluate(() =&gt; &#123;</span><br><span class="line">    document.querySelector(<span class="name">'#rso</span> div[role=<span class="string">"heading"</span>]').click()<span class="comment">;</span></span><br><span class="line">  &#125;)<span class="comment">;</span></span><br><span class="line">  await page.waitForNavigation()<span class="comment">;</span></span><br><span class="line">  await page.screenshot(&#123; path: <span class="string">"./screenshot_google_search.png"</span> &#125;)<span class="comment">;</span></span><br><span class="line">  await browser.close()<span class="comment">;</span></span><br><span class="line">&#125;)()<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/googlecorona.gif" alt="googlecorona" title="googlecorona"></p><p><a href="https://puppeteersandbox.com/P0aWYvFO" target="_blank" rel="noopener" title="puppeteersandbox google Demo">puppeteersandbox google Demo</a></p><h2 id="測試-facebook-login"><a href="#測試-facebook-login" class="headerlink" title="測試 facebook login"></a>測試 facebook login</h2><p>接下來測試一直想跑的 facebook login，曾經某天 facebook 偷偷改版 api，造成整個產品的 login 服務掛掉，或是前幾個月 facebook 連線就出問題了，但這都是在客戶端回報才發現到問題，所以期待這段以 cronjob 定時 run，來確保登入功能是正常的。</p><p>首先載入頁面，假設是手機版，頁面會自動跳出登入按鈕，按鈕上有寫上特殊的 attribute id=”e2e-login-button”，接下來等待這個按鈕顯示，可以使用 page.waitForSelector 等待這個 element visible，執行 button click。</p><p>倒轉到 facebook 網頁後，用 page.evaluate 執行 javascript，填入 facebook 帳號、密碼，再來點擊 facebook 登入按鈕，登入完成後會出現授權頁面，同樣點擊確認授權按鈕。</p><p>倒轉回到原本網站，接下來就判斷是否顯示 登出按鈕，確保使用者有完成登入流程。</p><p>核心邏輯大概就是 waitForSelector 等待 DOM render，並且 page.evaluate 執行互動，在等待 DOM render，執行互動 loop，達成我們所期待的畫面滾動。</p><ul><li>fbLogin.js<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config();</span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">"puppeteer"</span>);</span><br><span class="line"><span class="keyword">const</span> devices = <span class="built_in">require</span>(<span class="string">"puppeteer/DeviceDescriptors"</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.emulate(devices[<span class="string">"iPhone 7"</span>]);</span><br><span class="line">  <span class="keyword">await</span> page.goto(</span><br><span class="line">    <span class="string">"https://www.feversocial.com/promo/join?promoid=134364"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">"#e2e-login-button"</span>, &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.click(<span class="string">"#e2e-login-button"</span>);</span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">"#email_input_container"</span>, &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="function">(<span class="params">account, password</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"#email_input_container input"</span>).value = process.env.FBACCOUNT;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"input[type='password']"</span>).value = process.env.FBPASSWORD;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"button[name='login']"</span>).click();</span><br><span class="line">  &#125;, process.env.FBACCOUNT, process.env.FBPASSWORD);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">"button[name='__CONFIRM__']"</span>, &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">"button[name='__CONFIRM__']"</span>).click();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.waitForSelector(<span class="string">"div[type='0']"</span>, &#123;</span><br><span class="line">    visible: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.waitForFunction(<span class="string">`document.querySelectorAll('div[type="0"]')[1].textContent === '登出'`</span>);</span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123; path: <span class="string">"example.png"</span>, fullPage: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/fever_fblogin.gif" alt="fever fblogin" title="fever fblogin"></p><p>提醒一下，這個測試情境只針對曾經給予過 facebook auth 權限，因為跑完每次還要 reset auth 非常不方便。</p><ul><li>記得修改 facebook 帳號密碼 ( 如果擔心線上測試有資安疑慮，就避免使用，我是都用專門測試的帳號 )</li></ul><p><a href="https://puppeteersandbox.com/gThYhDA2" target="_blank" rel="noopener" title="puppeteersandbox facebook login Demo">puppeteersandbox facebook login Demo</a></p><h2 id="搭配-Jest-測試"><a href="#搭配-Jest-測試" class="headerlink" title="搭配 Jest 測試"></a>搭配 Jest 測試</h2><p>上述都是使用 puppeteer 建出流程，但實際上還需要搭配測試斷言工具，這樣才能讓判斷出測試 case 是不是正常，如果不正常的話是哪個流程有問題等等。</p><p>這邊使用到 Jest，環境設定與之前 Jest 大同小異，主要是需要安裝支援 puppeteer 的工具，讓 Jest 能夠執行 puppeteer 環境，基本上沒有太大的難度。如果遇到問題的話 Jest 官網也有 source code 可以提供下載。</p><ul><li>安裝 Jest<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>--save-dev <span class="keyword">jest-puppeteer </span><span class="keyword">jest</span></span><br></pre></td></tr></table></figure></li></ul><p>建立 jest.config.js, jest.setup.js</p><ul><li><p>jest.config.js</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">    preset: <span class="string">"jest-puppeteer"</span>,</span><br><span class="line">    setupFilesAfterEnv: [<span class="string">'./jest.setup.js'</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>設定環境以及應用 setup 設定</p></li><li><p>jest.setup.js</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">jest.setTimeout(<span class="number">10000</span>)</span><br></pre></td></tr></table></figure><p>延長 jest default 8000 msec 時間限制</p></li></ul><p><a href="https://jestjs.io/docs/en/puppeteer" target="_blank" rel="noopener" title="Jest with Puppeteer">Jest with Puppeteer</a></p><p><a href="https://github.com/checkly/puppeteer-examples" target="_blank" rel="noopener" title="Puppeteersandbox github sample code">Puppeteersandbox github sample code</a></p><h2 id="建立測試檔案"><a href="#建立測試檔案" class="headerlink" title="建立測試檔案"></a>建立測試檔案</h2><p>首先建立 <code>_test_</code> folder，接下來建立 login.spec.js，針對整個登入流程做判斷，預期之外的狀況就截圖，並且拋出相對錯誤訊息。Jest 無法跳出瀏覽器模擬，所以直接設定 headless 即可。</p><p>將上面的 fbLogin.js  script 貼上來作為修改，waitForSelector 增加 timeout，避免卡在一個狀態過久浪費時間，增加 try catch，針對錯誤進行截圖，方便出問題時 debug。</p><p>其餘與一般的 jest 差別不大，就是在預期發生錯誤增加斷言判斷等，這邊就不特別介紹了。實際內容再請觀看 github 上檔案。</p><p>小雷，process 我卡了大概 30 分鐘，process.env.FBPASSWORD 要用 function 作為參數帶入，直接在 evaluate callback function 內，因為環境緣故，是無法取得 process.env 的值。還有其他 dom selector 怎樣寫比較不會出錯等等，這是最耗時的部分，因為是 side project，沒有直接去改 dom 的 tag attribute，因為滿多強硬的 selector 寫法，建議大家還是好好 naming 狀態。</p><ul><li>login.spec.js<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">beforeEach(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> page.goto(</span><br><span class="line">    <span class="string">"https://www.feversocial.com/promo/join?promoid=134230"</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"Login"</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">"Fever Login Flow"</span>, <span class="keyword">async</span> done =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> page.emulate(devices[<span class="string">"iPhone 7"</span>]);</span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">"#e2e-login-button"</span>, &#123;</span><br><span class="line">      visible: <span class="keyword">true</span>,</span><br><span class="line">      timeout: <span class="number">1500</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> buttonHref = <span class="keyword">await</span> page.$eval(<span class="string">'#e2e-login-button'</span>, el =&gt; el.href);</span><br><span class="line">      <span class="keyword">await</span> expect(buttonHref).not.toBe(<span class="string">''</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">await</span> page.screenshot(&#123; path: <span class="string">"./promo_button_href_error.png"</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> page.click(<span class="string">"#e2e-login-button"</span>);</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">await</span> page.evaluate((account, password) =&gt; &#123;</span><br><span class="line">      <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">"#email_input_container input"</span>).value = account;</span><br><span class="line">      <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">"input[type='password']"</span>).value = password;</span><br><span class="line">      <span class="built_in">document</span>.<span class="built_in">querySelector</span>(<span class="string">"button[name='login']"</span>).click();</span><br><span class="line">    &#125;, process.env.FBACCOUNT, process.env.FBPASSWORD);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>Source Code : <a href="https://github.com/Ianpig/puppeteer-jest-example" target="_blank" rel="noopener" title="puppeteer-jest-example">puppeteer-jest-example</a></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>這些看起來很簡單，但這些我大概花了 3 天時間，雖然撥出來的時間零零碎碎，剛好某天開發時間有多出時間，就來嘗試用 puppeteer 寫一個測試登入，實際上未來要在搭配 docker 部署上去並以專案 release 時自動觸發，然後出現錯誤要 alarm，這有空再嘗試研究…。</p><p>以上如果有問題歡迎留言，感謝。</p>]]></content>
    
    <summary type="html">
    
      會以 Puppeteer 在 react 專案上跑 End to End Test。puppeteer 是由 Chrome DevTools team 團隊開發的，它是一個 node library 工具，提供 API 讓我們控制 chrome 或 Chromium，模擬執行各種功能。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="react.js" scheme="https://iandays.com/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>阻擋第三方(Block third-party) Cookie，各瀏覽器狀態</title>
    <link href="https://iandays.com/2019/12/11/iframeblockcookie/"/>
    <id>https://iandays.com/2019/12/11/iframeblockcookie/</id>
    <published>2019-12-11T15:34:01.000Z</published>
    <updated>2020-01-23T07:01:03.840Z</updated>
    
    <content type="html"><![CDATA[<p>來分享個 cookie 相關的內容，是前陣子合作專案測試階段遇到的問題，發生情境是，合作廠商的手機瀏覽器會無法登入會員，主要都是 IOS 用戶。</p><p>提一下目前頁面會放置在對方網站上以 iframe 使用，用戶會點擊 iframe 內登入按鈕，轉導頁面，載入對應的登入 line、facebook 網頁等等，完成登入。</p><p><img src="/images/blockcookie.png" alt="block cookie" title="block cookie"></p><h3 id="桌機、手機版-登入流程"><a href="#桌機、手機版-登入流程" class="headerlink" title="桌機、手機版 登入流程"></a>桌機、手機版 登入流程</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">Deskt<span class="symbol">op:</span> </span><br><span class="line">website (parent) =&gt; click Login =&gt; open window (child)</span><br><span class="line">=&gt; login success =&gt; postMessage to parent ( child close )</span><br><span class="line">=&gt; parent reload =&gt; done</span><br><span class="line"></span><br><span class="line">Mobi<span class="symbol">le:</span></span><br><span class="line">website (parent) =&gt; click Login</span><br><span class="line">=&gt; redirect =&gt; login success =&gt; done</span><br></pre></td></tr></table></figure><ul><li>登入流程 (簡易版)<br><img src="/images/loginflow.png" alt="login flow" title="login flow"></li></ul><p>登入是依賴 cookie，cookie 再交由後端驗證登入與否。經由測試後發現這些驗證請求都不會帶有 cookie，也就是說經由登入流程過後，cookie 沒有正確的存取到用戶的瀏覽器上。</p><p>但合作方希望能跳過以上這些步驟，載入頁面時，直接 call 後端取得 token，直接塞入頁面。</p><p>實際測試發現後端有正確建立這個 token，但就是前端 save cookie 那步驟有問題，於是開始轉向思考前端問題。</p><h2 id="Block-third-party-cookie"><a href="#Block-third-party-cookie" class="headerlink" title="Block third-party cookie"></a>Block third-party cookie</h2><p>IOS 11 開始預設開啟 prevent cross-site tracking 的設定，這會導致第三方 cookie 無法設置，例如 google analytics、facebook pixel 等等，另外也包括了 iframe 內部網頁，這符合我們的情境。</p><p>android 也同樣有這個設定，但目前沒有預設開啟。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Privacy by default</span><br><span class="line">Safari’s key privacy features are enabled by default.</span><br><span class="line"><span class="keyword">For</span> example, <span class="keyword">in</span> iOS, Intelligent<span class="built_in"> Tracking </span>Prevention</span><br><span class="line">(shown <span class="keyword">in</span><span class="built_in"> Settings </span>as Prevent Cross-Site Tracking)</span><br><span class="line">is turned on by default. Camera, microphone,</span><br><span class="line"><span class="keyword">and</span> location are <span class="builtin-name">set</span> <span class="keyword">to</span> ask <span class="keyword">for</span> permission before granting access.</span><br></pre></td></tr></table></figure><p>官方文件: <a href="https://www.apple.com/safari/docs/Safari_White_Paper_Nov_2019.pdf" target="_blank" rel="noopener" title="Safari Privacy Overview ">Safari Privacy Overview </a></p><h2 id="解決-Block-third-party-Cookie"><a href="#解決-Block-third-party-Cookie" class="headerlink" title="解決 Block third-party Cookie"></a>解決 Block third-party Cookie</h2><p>查了網路後，發現有個方法可以繞過 safari 阻擋 cookie，<code>就是要載入該 domain 並且設定一個 cookie 在該網域上</code>，之後 iframe 就可以設定 cookie 了。</p><p>但是在 chrome，就無法這樣處理了，android 實現阻擋的方法不一樣，它是讓 third-party 可以存 cookie，但是無法取出 cookie。</p><p>若要完美處理 Block third-party Cookie 唯一解法就是改用 local Storage 或是 Session Storage，前幾天在 Line Liff 上看到也是用 Session Storage 來處理 token。</p><h2 id="頁面無法倒轉情況"><a href="#頁面無法倒轉情況" class="headerlink" title="頁面無法倒轉情況"></a>頁面無法倒轉情況</h2><p>最近桌機 safari 的某個與 cookie 相關功能失效，就是因為 block third-party cookie 導致，那時同事 hotfix 做法非常簡單暴力，就是判斷 safari，直接轉導頁面過去 set cookie，再轉導回來。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>寫這篇是希望有人遇到 cookie 無法設定的問題，提供一些解決的方法。</p><p>另外還有 Web in app 時，也有很多狀態需要確認，每個 app 可能都有不一樣的設定，推薦大家一個 debug 工具，這工具可以會顯示 element、console、network、web storage，可以大量減少手機裝置 debug 的痛苦，web in app 無法連線桌機的 devTool 極高痛苦度。</p><p>工具: <a href="https://github.com/Tencent/vConsole" target="_blank" rel="noopener" title="Tencent vConsole">Tencent vConsole</a></p><p>前幾天 google 公告兩年後要全面阻擋第三方 cookie，這對於前端又是很大的考驗，看來未來要開發上，要多思考無法避免成為第三方狀況下，轉而使用 Session Storage、Local Storage。</p><p>感謝閱讀!!</p>]]></content>
    
    <summary type="html">
    
      IOS 11 開始預設開啟 prevent cross-site tracking 的設定，這會導致第三方 cookie 無法設置，若要完美處理 Block third-party Cookie 唯一解法就是改用 local Storage 或是 Session Storage。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://iandays.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Redux multiple dispatch，batch redux-thunk</title>
    <link href="https://iandays.com/2019/11/30/reduxdispatch/"/>
    <id>https://iandays.com/2019/11/30/reduxdispatch/</id>
    <published>2019-11-30T03:31:35.000Z</published>
    <updated>2019-11-30T06:00:50.406Z</updated>
    
    <content type="html"><![CDATA[<p>redux 核心更新 flow <code>dispatch action =&gt; reducer =&gt; store</code>，當你用 redux 運行多個 dispatch 時，每一個 dispatch 都會獨立更新下去的，這代表著你會 update component 多次，如果你的更新資料又彼此關聯，就可能會發生錯誤。</p><p>目前執行的專案，資料都是 linked list，若沒有注意好 dispatch 更新執行順序的話，時常會遇到問題。</p><p><img src="/images/redux-dispatch.png" alt="redux-dispatch" title="redux-dispatch"></p><ul><li>多個 dispatch 更新 <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">initINFO</span> ()&#123;</span><br><span class="line">  <span class="selector-tag">fetch</span>(<span class="built_in">`API_URL/getCommentList`</span>)</span><br><span class="line">    <span class="selector-class">.then</span>(res =&gt; res.json)</span><br><span class="line">    <span class="selector-class">.then</span>(data =&gt; </span><br><span class="line">      <span class="comment">// if ADD_USERCOMMENT update component </span></span><br><span class="line">      <span class="comment">// and it depends userInfo data </span></span><br><span class="line">      <span class="comment">// component maybe happen error</span></span><br><span class="line">      dispatch(&#123;<span class="attribute">type</span>: ADD_USERCOMMENT, <span class="attribute">payload</span>: data.list&#125;)</span><br><span class="line">      if (data.userInfo) &#123;</span><br><span class="line">        <span class="selector-tag">dispatch</span>(&#123;<span class="attribute">type</span>: INIT_INFO, <span class="attribute">payload</span>: data.userInfo&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="selector-class">.catch</span>(err =&gt; showError(err))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>處理的做法就是直接封裝整個 dispatch，讓每個 dispatch 都先不要往下執行 update component。</p><h2 id="redux-batch"><a href="#redux-batch" class="headerlink" title="redux batch"></a>redux batch</h2><p>react redux v7 有提供 batch，讓我們能直接封裝多個 dispatch，這是依賴 react 的 unstable_batchedUpdate，讓 rerender 這件事情能夠被卡住，react 實現方法大致上就是用 shouldBatchUpdates 變數搭配 fiber schedule 來判斷更新，讓更新這件事變成同步，詳細可直接看下方 react unstable_batchedUpdates source code。</p><ul><li>batch 使用方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; batch &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myThunk</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// should only result in one combined re-render, not two</span></span><br><span class="line">    batch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(increment())</span><br><span class="line">      dispatch(increment())</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://github.com/reduxjs/redux/blob/a5739d9455afbed663a4ca1fcac002988c885fcb/docs/faq/Performance.md#how-can-i-reduce-the-number-of-store-update-events" target="_blank" rel="noopener" title="react redux github batch Q&amp;A">react redux github batch Q&amp;A</a></p><p><a href="https://github.com/facebook/react/commit/b41883fc708cd24d77dcaa767cde814b50b457fe" target="_blank" rel="noopener" title="react unstable_batchedUpdates source code">react unstable_batchedUpdates source code</a></p><h2 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux thunk"></a>redux thunk</h2><p>redux thunk 同樣可以幫助我們處理多個 dispatch，但是與 batch 原理不大相同，redux thunk，是將 dispatch 往後延遲到最後一次執行。</p><p>乍聽之下可能覺得這有點魔幻，但我貼上 redux thunk 的介紹你一定會恍然大悟。redux thunk 就是將 dispatch 封裝起來在最後一次真正執行 store.dispatch，所以你就只會觸發一次的 redux store update，進而達到只 rerender 一次。</p><ul><li><p>what is thunk</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// calculation <span class="keyword">of</span> <span class="number">1</span> + <span class="number">2</span> <span class="keyword">is</span> <span class="keyword">immediate</span></span><br><span class="line">// x === <span class="number">3</span></span><br><span class="line">let x = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">// calculation <span class="keyword">of</span> <span class="number">1</span> + <span class="number">2</span> <span class="keyword">is</span> delayed</span><br><span class="line">// foo can be <span class="keyword">called</span> later <span class="keyword">to</span> <span class="keyword">perform</span> the calculation</span><br><span class="line">// foo <span class="keyword">is</span> a thunk!</span><br><span class="line">let foo = () =&gt; <span class="number">1</span> + <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>Add thunk on redux middleWare</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"><span class="keyword">import</span> reducers <span class="keyword">from</span> <span class="string">'../redux/reducers'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducers, applyMiddleware(thunk));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchUser</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">      dispatch(&#123;<span class="keyword">type</span>: ADD_USERCOMMENT, payload: data.list&#125;)</span><br><span class="line">      <span class="keyword">if</span> (data.userInfo) &#123;</span><br><span class="line">        dispatch(&#123;<span class="keyword">type</span>: INIT_INFO, payload: data.userInfo&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>extraArgument 不用理會，這是新功能讓使用者客製化增加 thunk 的參數，action 會是我們傳入的 action creator，當 action creator 是一個 function，就執行 action creator function，如果不是就執行 next 帶入 action creator，正常的執行 dispatch。</p><p><a href="https://redux.js.org/api/applymiddleware" target="_blank" rel="noopener" title="redux applymiddleware">redux applymiddleware</a></p><ul><li>thunk source code<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://github.com/reduxjs/redux-thunk/blob/master/src/index.js" target="_blank" rel="noopener" title="redux thunk">redux thunk</a></p><ul><li>舊版 applyMiddleWare (github 只剩 typescript…)<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// middlewares argument is pass thunk</span></span><br><span class="line">export <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="params">(<span class="rest_arg">...middlewares</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (createStore) =&gt; (reducers, initialState, enhancer) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(reducers, initialState, enhancer)</span><br><span class="line">    <span class="keyword">const</span> dispatch = store.dispatch</span><br><span class="line">    <span class="keyword">const</span> chain = []</span><br><span class="line">    <span class="keyword">const</span> middleWareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: action =&gt; dispatch(action)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</span><br><span class="line">    dispatch = compose(...chain)(store.dispatch) <span class="comment">// store.dispatch or dispatch both work</span></span><br><span class="line">    <span class="comment">// compose will do following thing:</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * a, b, c ==&gt; a(b(c())), indeed, it is just a reduce and store.dispatch will be an initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>redux thunk code 很優美，完美的示範如何使用 redux 的 middleWare，邏輯清楚又不複雜。我一定不會說這篇文章是為了分享 redux thunk。</p><p>改天再來研究、分享更優美的 redux。</p><p>這兩個方法 <code>batch</code>、<code>redux thunk</code> 都是目前專案都有用到的方法，至於其他就改天再另外介紹。 batch 因為與 react fiber 更新 component 機制有關，這部分較複雜，我對這塊沒有特別研究…，無法提供太多看法。</p><p>感謝閱讀，以上有錯誤再麻煩留言或私訊。</p>]]></content>
    
    <summary type="html">
    
      redux 核心流程 dispatch action =&gt; reducer =&gt; store，當你用 redux 運行多個 dispatch 時，每一個 dispatch 都會獨立更新下去的，如果你的更新資料又彼此關聯，就可能會發生錯誤。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="react.js" scheme="https://iandays.com/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>React Unit Test with Jest 單元測試</title>
    <link href="https://iandays.com/2019/09/29/jestunit/"/>
    <id>https://iandays.com/2019/09/29/jestunit/</id>
    <published>2019-09-29T15:47:10.000Z</published>
    <updated>2019-09-29T17:53:49.018Z</updated>
    
    <content type="html"><![CDATA[<p>Unit Test(單元測試)，針對程式的最小單位，進行測試，最小單位可能是一個 function，或一個 component、class 等等，執行單元測試是為了確保每個功能都能夠正常執行，提早發現並找出問題所在。</p><p>目前正在開發新專案，但又要兼顧維運另個舊專案，舊專案是公司核心產品，常常需要改動需求，因為新專案 deadline 緊迫，不大有時間詳細的測試改動，最近疊加太多功能，導致連動出現滿多 bug，因為這事件，更讓我們重視測試的重要性。</p><p><img src="/images/reactunittest.png" alt="react unit test" title="react unit test"></p><p>接下來就來針對 react hooks 做 component testing。</p><h2 id="安裝測試工具-Jest"><a href="#安裝測試工具-Jest" class="headerlink" title="安裝測試工具 Jest"></a>安裝測試工具 Jest</h2><p>Jest 是由 facebook 開源的工具，源自於 Jasmine 延伸開發，設定少、輕巧，官方文件非常清楚，提供斷言庫、mocking data等，Jest 算是我們 test 的 runner，可以再搭配 enzyme、puppeteer 等等執行，讓 test 能更齊全。</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> jest</span><br></pre></td></tr></table></figure><ul><li>編輯 package.json<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"jest"</span>,</span><br><span class="line">  <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>執行 Jest 會預設抓取 <code>__tests__</code> folder 內 js、ts 檔案，或是 fileName 有 spec、test 的 js ts 檔案 來跑測試， 假設你有用到 babel，或是其他 css 編譯工具，則需要設定 jest config。</p><p>規則預設 </p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">([ "**/__tests__/**/*.[jt]s?(x)</span><span class="string">", "</span>**/?<span class="comment">(*.)</span>+<span class="comment">(spec|test)</span>.[jt]s?<span class="comment">(x)</span><span class="string">" ])</span></span><br></pre></td></tr></table></figure><p>官方文件: <a href="https://jestjs.io/docs/en/getting-started" target="_blank" rel="noopener" title="Jest starter guide">Jest starter guide</a></p><p>Jest 主要依賴幾個 function 執行測試，describe function 可以讓我們對這一個測試做命名，以便後面執行測試追蹤，test function 則是讓我們定義某個 test case，例如範例，我們用 describe 測試包覆多種狀況來測試，expect 則是讓我們丟入 function 做 return，toBe 就是預期測試結果是否符合預期。</p><p>官方文件: <a href="https://jestjs.io/docs/en/using-matchers" target="_blank" rel="noopener" title="Jest 斷言方式">Jest 斷言方式</a></p><ul><li>Jest 使用<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">describe('Test sum', () =&gt; &#123;</span><br><span class="line">    test('function return <span class="number">0</span>', () =&gt; &#123;</span><br><span class="line">        expect(<span class="name">sum</span>(<span class="number">0</span>)).toBe(<span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    test('function sum <span class="number">0</span>, <span class="number">1</span> return <span class="number">1</span>', () =&gt; &#123;</span><br><span class="line">        expect(<span class="name">sum</span>(<span class="number">0</span>,<span class="number">1</span>)).toBe(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>目前新專案是純倚賴 Jest 來測試，主要規劃會以 function test 以及 end to end 為主，主要先針對最重要的 function 做不同情境測試。</p><p>安裝完成有遇到 react-script start 會有 jest error，依照提示移除 jest、node_modules、package-lock.json，並重新安裝即可解決。</p><h2 id="react-test-renderer-Snapshot-Testing"><a href="#react-test-renderer-Snapshot-Testing" class="headerlink" title="react-test-renderer Snapshot Testing"></a>react-test-renderer Snapshot Testing</h2><p>剛好在 react test guide 看到，好奇順便研究一下，react-test-renderer 是 facebook 開發的工具，功能直覺簡單，是用來實現不需要依賴瀏覽器 render component 執行 test，首先會幫你 render compoent，並可讓你執行 toMatchSnapshot 匯出元件 render Snaphot，也可在依照 render component 模擬更新互動，更新後狀態也可匯出 snapshot，另外也可以純取值比較。</p><p>如果你元件經常要更新，可想而知你這份 snapshot testing 會經常需要更新，但如果穩定，就可以直接測試出 component 與資料不同的更新樣貌。</p><p>文件: <a href="https://reactjs.org/docs/test-renderer.html#testrenderer" target="_blank" rel="noopener" title="react-test-renderer">react-test-renderer</a></p><p>下面是簡單的元件，主要測試是觸發 <code>&lt;span&gt;</code> 的 onClick 讓 state count 更新。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TodoView</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [todoList, addTodo, deleteToDo] = useTodoList([], inputEl);</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span onClick=&#123;()=&gt;setCount(count+<span class="number">1</span>)&#125;&gt;Counter : &#123;count&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      ...</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下方為實際使用範例，主要邏輯就是使用 create render component，再把元件資料轉格式匯出 snapshot，並可以用 act 來調用 component function，直接拉 props function 用會有 error warning，主要用起來困難點會是在 selector，還是如何整理 snapshot 匯出格式，幫助我們日後測試。</p><p>目前專案尚未導入 snapshot test，因為專案還在不斷改動中，評估 component test 維運成本過高先略過。</p><ul><li>src/<strong>testSnap</strong>/TodoView.test.js<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; create, act &#125; <span class="keyword">from</span> <span class="string">"react-test-renderer"</span>;</span><br><span class="line"><span class="keyword">import</span> TodoView <span class="keyword">from</span> <span class="string">'/container/TodoView'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">"TodoView component"</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  test(<span class="string">"it shows the expected text when clicked"</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    let component;</span><br><span class="line">    act(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      component = create(&lt;TodoView /&gt;);</span><br><span class="line">    &#125;);</span><br><span class="line">    let tree = component.toJSON();</span><br><span class="line">    expect(tree).toMatchSnapshot();</span><br><span class="line">    const instance = component.root;</span><br><span class="line"></span><br><span class="line">    const button = instance.findByType(<span class="string">"span"</span>);</span><br><span class="line">    act(<span class="function"><span class="params">()</span> =&gt;</span> button.props.onClick());</span><br><span class="line">    expect(button.props.children.join()).toBe(<span class="string">"Counter : ,1"</span>)</span><br><span class="line">    expect(button.props.children).toMatchSnapshot();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Component-Testing-testing-library-react"><a href="#Component-Testing-testing-library-react" class="headerlink" title="Component Testing @testing-library/react"></a>Component Testing @testing-library/react</h2><p>React 官方範例是可以依賴內部 function act 去 render component，並依賴 dispatch event 去觸發事件，但若是複雜，官方更推薦使用 @testing-library/react，這是一套專注於測試 user interactive 的工具，可以讓我們模擬 select component -&gt; click，有別於 enzyme 依賴執行 function trigger 更新 component。</p><p>這套工具是同事推薦的，react testing library 專注的方向符合我們的需要，更能貼近使用者實際的互動。</p><ul><li>React 官方 test note<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">We recommend using React Testing Library which is designed <span class="keyword">to</span></span><br><span class="line"><span class="builtin-name">enable</span> <span class="keyword">and</span> encourage writing tests that use your components </span><br><span class="line">as the end<span class="built_in"> users </span><span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Alternatively, Airbnb has released a testing utility called Enzyme,</span><br><span class="line">which makes it easy <span class="keyword">to</span> assert, manipulate, <span class="keyword">and</span> traverse your</span><br><span class="line">React Components’ output.</span><br></pre></td></tr></table></figure></li></ul><p>下方為 TypeInInput 的元件，預期當我們 pass text 會 render 出字串，並觸發 onChange event 傳遞 value，再來比較 input 內的 value 是否符合，接下來就來測試這個情境。</p><p>@testing-library/react 主要依賴 render 來 render component，fireEvent 則讓我們可以觸發事件(click、change、dispatch Event)。</p><p>主要流程大致為 render component，並接受返回的 function，各種 selector 都會在這時候取得，目前寫起來最順手是利用 getByTestId 搭配 data-testid，以往再寫 react component，會比較少寫 class or id，利用 tag 或是 string 來做選擇，難度更是麻煩，這些更常會因為需求更新。</p><ul><li>TypeInInput Component<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render, fireEvent &#125; <span class="keyword">from</span> <span class="string">"@testing-library/react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TypeInInput</span>(<span class="params">&#123;text&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">const</span> onChangeValue = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setValue(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;label&gt;&#123;text&#125;&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input data-testid="typeIn" value=&#123;value&#125; onChange=&#123;onChangeValue&#125; /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">describe("Test TypeInInput", () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const text = "email";</span></span><br><span class="line"><span class="regexp">  test("change event", () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; getByText &#125; = render(&lt;TypeInInput text=&#123;text&#125; /</span>&gt;); </span><br><span class="line">    <span class="keyword">const</span> title = getByText(<span class="regexp">/email/</span>);</span><br><span class="line">    expect(title.textContent).toEqual(text);</span><br><span class="line">  &#125;);</span><br><span class="line">  test(<span class="string">"change event"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getByTestId &#125; = render(<span class="xml"><span class="tag">&lt;<span class="name">TypeInInput</span> <span class="attr">text</span>=<span class="string">&#123;text&#125;</span> /&gt;</span></span>); </span><br><span class="line">    <span class="keyword">const</span> typeInElem = getByTestId(<span class="string">"typeIn"</span>);</span><br><span class="line">    <span class="keyword">const</span> test = <span class="string">"emample@gmail.com"</span>;</span><br><span class="line">    fireEvent.change(typeInElem, &#123; <span class="attr">target</span>: &#123; <span class="attr">value</span>: test &#125; &#125;);</span><br><span class="line">    expect(typeInElem.value).toEqual(test);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>至於比較複雜的 async function api 的操作，記得要修改 babel config 執行非同步，以及安裝 @testing-library/jest-dom 執行 toHaveTextContent，讓斷言能更靈活。</p><ul><li>babel.config.js<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    targets: &#123;</span><br><span class="line">      node: <span class="string">"current"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p>Fetch 接受 url、axios (模擬 api call) 兩個 prop。Component 內用到 state、useCallback、建立 function fetchData，</p><p>Component 預期狀態</p><p>useEffect 會在元件 render 傳入 url 以及 apiCall function，並執行 click element 觸發 fetchData 調用 apiCall 更新 state。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useCallback &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render, fireEvent, waitForElement &#125; <span class="keyword">from</span> <span class="string">"@testing-library/react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@testing-library/jest-dom/extend-expect'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fetch</span>(<span class="params">&#123; url, apiCall &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setDate] = useState();</span><br><span class="line">  <span class="keyword">const</span> fetchData = useCallback(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> apiCall.get(url);</span><br><span class="line">    setDate(response.data);</span><br><span class="line">  &#125;, [apiCall, url]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;fetchData&#125;&gt;Fetch&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &#123;data ? &lt;span data-testid="fetch"&gt;&#123;data.test&#125;&lt;/</span>span&gt; : <span class="literal">null</span>&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">test("Fetch makes an API call and displays the greeting", async () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const fakeAxios = &#123;</span></span><br><span class="line"><span class="regexp">    get: jest.fn(() =&gt; Promise.resolve(&#123; data: &#123; test: "hello world" &#125; &#125;))</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">  const url = "https:/</span><span class="regexp">/example.com/g</span>et-hello-there<span class="string">";</span></span><br><span class="line"><span class="string">  const &#123; getByText, getByTestId &#125; = render(</span></span><br><span class="line"><span class="string">    &lt;Fetch url=&#123;url&#125; apiCall=&#123;fakeAxios&#125; /&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">  fireEvent.click(getByText(/fetch/i));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  const fetchNode = await waitForElement(() =&gt; getByTestId("</span>fetch<span class="string">"));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  expect(fetchNode).toHaveTextContent("</span>hello world<span class="string">");</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure><p>更複雜例子也可以查閱作者在 codesandbox 寫的各種 sample code，</p><p>作者範例: <a href="https://codesandbox.io/s/github/kentcdodds/react-testing-library-examples" target="_blank" rel="noopener" title="kentcdodds codesandbox">kentcdodds codesandbox</a></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>單元測試在我剛寫程式時，認為測試 case 是自己預期的，還主觀的認為沒什麼用，因為開發者所預期的測試一定充滿盲點，沒太大用處。但我在實際寫幾個測試後，發現最大的功用在於程式的 clear，當你在寫某個功能時，能更專注在預期判斷 input output，也有助於你思考 function 架構更清楚。</p><p>你可能會說每次測試都沒抓到真實發生的 bug，這時就要換個角度思考，為什麼測試 case 沒測試到，是不是情境 case 太過簡單、理想，是不是需要再擴展更多 case。</p><p>新專案不幸的重構了大概兩次左右…，還是最重要的資料更新，運氣很好的在改動中有在測試階段發現問題，我大概被抓到兩次問題，當時心想這個 testing case 的時間成本回本了XDD，不斷讓我佩服 unit test 發揮做用。</p><p>內文這些實際範例，寫起來最卡的部分在環境設定，非同步測試…、編譯錯誤等等，還有熟悉 selector 與斷言方式，不像是 enzyme 有 cherrio 支援類似 jquery 的語法，剩下就是各種使用測試技巧，這個寫更多案例後會更熟悉。後續有 react-testing-library 實際導入專案會再多寫相關內容。</p><p>以上若有錯誤，歡迎留言提醒，</p><p>感謝閱讀。</p>]]></content>
    
    <summary type="html">
    
      單元測試在我剛寫程式時，認為測試 case 是自己預期的，還主觀的認為沒什麼用。但我在實際寫幾個測試後，能更專注在預期判斷 input output，也有助於你思考 function 架構更清楚。接下來就來針對 react hooks 做 component testing。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="react.js" scheme="https://iandays.com/tags/react-js/"/>
    
      <category term="testing" scheme="https://iandays.com/tags/testing/"/>
    
  </entry>
  
  <entry>
    <title>GA跨網域追蹤 google analytics cross-domain tracking</title>
    <link href="https://iandays.com/2019/08/04/gacrossdomain/"/>
    <id>https://iandays.com/2019/08/04/gacrossdomain/</id>
    <published>2019-08-04T06:28:23.000Z</published>
    <updated>2019-08-04T14:22:16.821Z</updated>
    
    <content type="html"><![CDATA[<p>如果你有多個網站服務，每個服務又是各自在不同網域上，就會遇到一個棘手的問題，無法確切的追蹤使用者數據。或許你現在還沒遇到，但我來舉個例子讓你理解問題怎麼發生。</p><p>情境假設，你今天操作 google ads 的 landing page 是 example.com，但是使用者後續造訪頁面是 buyservice.com，你的 buyservice.com 上 google analytics 數據就會有問題，會在報表看到使用者的 <code>參考來源</code> 會是example.com，而不是 google ads ，這樣就會無法正確估算 example.com 帶給 buyservice.com 的廣告效益。</p><p> <img src="/images/gacrossdomain.png" alt="google analytics cross domain tracking" title="google analytics cross domain tracking"></p><p>這是因為 google analytics 數據是依賴 cookie 做定位使用者 (Client-ID)，但是 cookie 有個限制， 同一個 cookie 只能在同 domain 下共同享有，所以跨網域就會斷掉追蹤數據，但還好 google analytics 有提供 <code>跨網域追蹤</code> 功能，讓我們解決這個問題。後面就來嘗試跨網域追蹤設定。</p><p> 官方教學: <a href="https://support.google.com/analytics/answer/1034342?hl=zh-Hant" target="_blank" rel="noopener" title="設定跨網域追蹤 (analytics.js)">設定跨網域追蹤 (analytics.js)</a></p><h2 id="google-analytics-追蹤碼修改"><a href="#google-analytics-追蹤碼修改" class="headerlink" title="google analytics 追蹤碼修改"></a>google analytics 追蹤碼修改</h2><p>需要找出你的 google analytics 設定追蹤碼，再針對 <code>ga(&#39;create&#39;, &#39;UA-XXXXXXX-Y&#39;, &#39;你的網址&#39;)</code> 修改，需要改為 auto，並在後面加上 {‘allowLinker’: true} 參數，後面再加上 ｀ga(‘require’, ‘linker’);｀ ，並加上 <code>ga(&#39;linker:autoLink&#39;, [&#39;相對應的 domain&#39;] )</code>，這樣就完成了設定。</p><h3 id="傳統追蹤碼"><a href="#傳統追蹤碼" class="headerlink" title="傳統追蹤碼"></a>傳統追蹤碼</h3><ul><li><p>example.com 修改追蹤碼</p><figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">ga(<span class="symbol">'create'</span>, <span class="symbol">'UA</span>-<span class="type">XXXXXXX</span>-<span class="type">Y'</span>, <span class="symbol">'example</span>.com');</span><br><span class="line">對這段程式碼進行下列變更 (紅色粗體文字是需要變更的部分)：</span><br><span class="line"></span><br><span class="line">ga(<span class="symbol">'create'</span>, <span class="symbol">'UA</span>-<span class="type">XXXXXXX</span>-<span class="type">Y'</span>, <span class="symbol">'auto'</span>, &#123;<span class="symbol">'allowLinker'</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">ga(<span class="symbol">'require'</span>, <span class="symbol">'linker'</span>);</span><br><span class="line">ga(<span class="symbol">'linker</span>:autoLink', [<span class="symbol">'buyservice</span>.com'] );</span><br></pre></td></tr></table></figure></li><li><p>buyservice.com 修改追蹤碼</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">ga('create', 'UA-XXXXXXX-Y', 'auto', &#123;'allowLinker': true&#125;)<span class="comment">;</span></span><br><span class="line">ga('require', 'linker')<span class="comment">;</span></span><br><span class="line">ga('linker<span class="symbol">:autoLink</span>', ['example.com'] )<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="tag-manager-追蹤碼"><a href="#tag-manager-追蹤碼" class="headerlink" title="tag manager 追蹤碼"></a>tag manager 追蹤碼</h3><p>如果你是用 tag manager 設定 google analytics 的話，在google analaytics 追增設定內的欄位設定(Field)，再增加 allowLinker 值 true，自動連結網址就填上要連動的網域。這樣就完成 tag manager 的設定了。記得 tag manager 的改動要提交更新。</p><p> <img src="/images/gacrossdomaintagmanager.png" alt="google analytics cross domain tagmanager" title="google analytics cross domain tagmanager"></p><h3 id="google-analytics-設定排除參照連結"><a href="#google-analytics-設定排除參照連結" class="headerlink" title="google analytics 設定排除參照連結"></a>google analytics 設定排除參照連結</h3><p>當一個網站到另一個網站時，google analytics 會自動建立新的工作階段，如果要跨多個網域追蹤單一工作階段，要把相對應網域加進參照連結網址排除清單。</p><p> <img src="/images/gacrossdomainsetting.png" alt="google analytics cross domain setting" title="google analytics cross domain setting"></p><h2 id="網址參數-ga"><a href="#網址參數-ga" class="headerlink" title="網址參數 _ga"></a>網址參數 _ga</h2><p>完成設定之後，就可以測試看看效果如何，下方是完成設定的 demo ，如果你點擊連結 go to <a href="https://thawing-stream-74537.herokuapp.com/" target="_blank" rel="noopener">https://thawing-stream-74537.herokuapp.com/</a> 後，會發現網址多一段參數 ?_ga=2.189459235.924386874.1564911255-1438900564.1564911255 ，這就是 google analytics 傳遞 client_id 的參數，依賴這參數可以讓工作階段在跨網域下不中斷。</p><iframe src="https://test.iandays.com/gacrossdomain.html" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="共用-google-analytics-追蹤代碼"><a href="#共用-google-analytics-追蹤代碼" class="headerlink" title="共用 google analytics 追蹤代碼"></a>共用 google analytics 追蹤代碼</h2><p>如果你是分開兩個 google analytics 帳戶，還是會無法延續追蹤資訊，只能共用 client_id ，但這意義不大，因為通常 client_id 都會設定成會員id，所以網站通常都會共用 client_id，所以我們要再多額外開一個檢視資料，產生一組新的追蹤代碼，讓兩個互相跨 domain 網站共用。</p><ul><li><p>載入 <a href="https://test.iandays.com/gacrossdomain.html?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=weekend_sale01" target="_blank" rel="noopener">https://test.iandays.com/gacrossdomain.html?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=weekend_sale01</a> utm 數據<br><img src="/images/gacrossdomainview.png" alt="google analytics cross domain view data" title="google analytics cross domain setting"></p></li><li><p>載入連結後 <a href="https://thawing-stream-74537.herokuapp.com" target="_blank" rel="noopener">https://thawing-stream-74537.herokuapp.com</a> 數據<br><img src="/images/gacrossdomainview2.png" alt="google analytics cross domain view data" title="google analytics cross domain setting"></p></li></ul><p>這樣就發現我們把 utm 的追蹤資訊延續下去了，一般狀況沒設定 cross domain 共享 client_id 的話，會變成兩個 session，因為 cookie 無法共享，但這樣對於追蹤來說，就有非常大的幫助，我們不用在擔心數據掉落的問題。</p><h2 id="報表檢視增加-domain"><a href="#報表檢視增加-domain" class="headerlink" title="報表檢視增加 domain"></a>報表檢視增加 domain</h2><p>如果在檢視報表時，沒有顯示 domain 的話，會不方便直觀分辨網址的 domain 問題，因為 google analytics 預設不顯示 domain，我們要在設定增加顯示，以便我們觀看數據。</p><p>點選篩選器 =&gt; 自訂 =&gt; 進階，分別在前兩個 選擇主機名稱 內容填上 <code>(.*)</code>，這代表我們要取全部的 domain name，請求 URI 則是 填上 <code>(.*)</code>，取用全部請求網址，後面 輸出至 -&gt; 建構函式 再分別選擇 URI，內容填上 <code>$A1$B1</code>，取用前面兩個條件拿到全部值。</p><ul><li><p>google analytics 篩選器設定<br><img src="/images/gacrossdomainsetting3.png" alt="google analytics cross domain setting" title="google analytics cross domain setting"></p></li><li><p>檢視報表<br><img src="/images/gacrossdomainview3.png" alt="google analytics cross domain view data" title="google analytics cross domain view data"></p></li></ul><p>這樣就完成了整個設定，達到了跨網域追蹤的功能！</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>雖然這跨網域追蹤一直以來都存在著，以前擔任行銷時，可惜沒有使用到這個功能，公司網址包含 blog 的話大概有6個，如果都有設定的話，就更能了解轉換的流程。以往都只能在站內連結上加上 utm，被動地去追蹤數據，但假設是 google ads 進來的流量，但到第二個 domain 成效歸屬就被認為是站內連結，模糊了數據的焦點。</p>]]></content>
    
    <summary type="html">
    
      如果你有多個網站服務，每個服務又是各自在不同網域上，就會遇到一個棘手的問題，無法確切的追蹤使用者數據。google analytics有提供跨網域追蹤，讓我們解決這個問題，後面就來嘗試跨網域追蹤設定。
    
    </summary>
    
      <category term="marketing" scheme="https://iandays.com/categories/marketing/"/>
    
    
      <category term="google_analytics" scheme="https://iandays.com/tags/google-analytics/"/>
    
  </entry>
  
  <entry>
    <title>React Context API 跨元件傳遞資料</title>
    <link href="https://iandays.com/2019/07/28/reactcontextapi/"/>
    <id>https://iandays.com/2019/07/28/reactcontextapi/</id>
    <published>2019-07-28T14:40:54.000Z</published>
    <updated>2019-07-30T17:46:15.951Z</updated>
    
    <content type="html"><![CDATA[<p>React是單向資料流，利用 React.createElement 建構出整個 element tree 結構，使用者利用 state 及 props 處理元件資料，並搭配觸發 react 更新元件。因為 props 是需要傳遞的，所以時常會遇到 props 需要傳很多層。React為了解決這問題，建立了 context API 的功能，要功能就是跨元件傳遞資料，像是知名的 state 管理工具 react-redux 就是依賴 context 實現的。</p><p>最近就遇到所有 API Error handle 都需要用到新欄位的值，這個值就幾乎傳到到所有元件，中間還不小心遺漏傳遞一個元件，發生些問題…。現在回過頭想想用 context 處理問題會少很多。</p><p><img src="/images/react.png" alt="React Context" title="React Context"></p><ul><li>Pass props Hell<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Header islogin=&#123;islogin&#125;/&gt;</span><br><span class="line"><span class="comment">// inside Header Element</span></span><br><span class="line">  &lt;Navbar islogin=&#123;islogin&#125; /&gt;</span><br><span class="line">  <span class="comment">// inside Navbar Element</span></span><br><span class="line">    &lt;Account islogin=&#123;islogin&#125; /&gt;</span><br><span class="line">    <span class="comment">// inside Account Element</span></span><br><span class="line">      &lt;User islogin=&#123;islogin&#125; /&gt;</span><br><span class="line">        &#123;islogin ?</span><br><span class="line">          &lt;Button onClick=&#123;Logout&#125;&gt;Logout&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        :</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ Pass all props</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ it will make child Components rerender by all props update</span></span><br><span class="line"><span class="regexp">&lt;Header &#123;...props&#125;/</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="createContext-建立資料"><a href="#createContext-建立資料" class="headerlink" title="createContext 建立資料"></a>createContext 建立資料</h2><p>首先必須先在需要使用的元件內，先執行<code>React.createContext</code>建立一個context，其中參數defaultValue只會在沒有 Provider 傳遞value才會使用到。</p><ul><li>React.createContext return object<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">React.createContext(defaultValue);</span></span><br><span class="line"><span class="string">const</span> <span class="string">MyContext</span> <span class="string">=</span> <span class="string">React.createContext(&#123;isLogin:</span> <span class="literal">false</span><span class="string">&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="string">$$typeof:</span> <span class="string">Symbol(react.context)</span></span><br><span class="line"><span class="attr">Consumer:</span> <span class="string">&#123;$$typeof:</span> <span class="string">Symbol(react.context),</span> <span class="attr">_context:</span> <span class="string">&#123;…&#125;,</span> <span class="attr">_calculateChangedBits:</span> <span class="literal">null</span><span class="string">,</span> <span class="string">…&#125;</span></span><br><span class="line"><span class="attr">Provider:</span> <span class="string">&#123;$$typeof:</span> <span class="string">Symbol(react.provider),</span> <span class="attr">_context:</span> <span class="string">&#123;…&#125;&#125;</span></span><br><span class="line"><span class="attr">_calculateChangedBits:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">_currentRenderer:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">_currentRenderer2:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">_currentValue:</span> <span class="string">&#123;isLogin:</span> <span class="literal">false</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">_currentValue2:</span> <span class="string">&#123;isLogin:</span> <span class="literal">false</span><span class="string">&#125;</span></span><br><span class="line"><span class="attr">_threadCount:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">__proto__:</span> <span class="string">Object</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Provider-提供value"><a href="#Provider-提供value" class="headerlink" title="Provider 提供value"></a>Provider 提供value</h2><p>調用 createContext 後，回傳的物件會帶有Provider、Consumer 元件，Provider 可以提供value，給相對應最接近的 Consumer 使用value，最特別的是 Provider 更新value後，會觸發相對應的 Consumer 更新元件，並且無視 shouldComponentUpdate 限制 (這在舊版Context無法達到)。</p><p>記得要 export React.createContext 回傳值，讓其他元件可以直接 import 使用 Consumer。還有提醒要注意 Provider 的 update 狀態，如果Provider 的元件會頻繁更新，但 Provider 的value 會每次都是新物件，會促使有 Cosumer 的元件每次都 update。</p><ul><li><p>當元件 rerender 會同時更新 Consumer 調用的元件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// isLogin will forever new one</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;MyContext.Provider value=&#123;&#123; <span class="attr">isLogin</span>: isLogin &#125;&#125;&gt;</span><br></pre></td></tr></table></figure></li><li><p>傳遞的值保持同一參考 MyContext Provider</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">export const <span class="type">MyContext</span> = <span class="type">React</span>.createContext(&#123; isLogin: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    isLoginStatus: &#123; isLogin: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123; isLoginStatus &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;<span class="type">MyContext</span>.<span class="type">Provider</span> value=&#123;isLoginStatus&#125;&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h2 id="Consumer-提取-value"><a href="#Consumer-提取-value" class="headerlink" title="Consumer 提取 value"></a>Consumer 提取 value</h2><p>Consumer 元件可以獲取 context 資料，假設沒有最接近的 Provider 提供value，Cosumer 會取到 createContext 的 defaultvalue。若有Provider提供值，則是會保持訂閱更新，也就是達到跨元件同步資料，並update component。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MyContext &#125; <span class="keyword">from</span> <span class="string">"../Container"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Account</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"account"</span>&gt;</span><br><span class="line">      &lt;MyContext.Consumer&gt;</span><br><span class="line">        &#123;(&#123; isLogin &#125;) =&gt; &#123;</span><br><span class="line">          <span class="keyword">return</span> isLogin ? <span class="string">"Logout"</span> : <span class="string">"Login"</span>;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &lt;<span class="regexp">/MyContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://codesandbox.io/s/relaxed-banzai-su39f" target="_blank" rel="noopener" title="Consumer codesandbox">Consumer codesandbox</a></p><iframe src="https://codesandbox.io/embed/relaxed-banzai-su39f?fontsize=12,result" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="context更新-rerender取用元件"><a href="#context更新-rerender取用元件" class="headerlink" title="context更新 rerender取用元件"></a>context更新 rerender取用元件</h2><p>context 的 Provider 更新value時，會一起更新 context Consumer 的取用元件，並且無視於 shouldComponentUpdate。</p><p><a href="https://codesandbox.io/s/happy-moon-ypeqm" target="_blank" rel="noopener" title="Consumer shouldComponentUpdate codesandbox">Consumer shouldComponentUpdate codesandbox</a></p><iframe src="https://codesandbox.io/embed/happy-moon-ypeqm?fontsize=12,result" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="contextType-取值"><a href="#contextType-取值" class="headerlink" title="contextType 取值"></a>contextType 取值</h2><p>contextType 是直接在 react 的 component 的 instance 再加上 context，所以只能用在 class Component，一個元件只能使用一個 context。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> MyContext <span class="keyword">from</span> <span class="string">"../context/MyContext"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = MyContext;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isLogin, setLogin &#125; = <span class="keyword">this</span>.context;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"account"</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;isLogin ? <span class="string">"Logout"</span> : <span class="string">"Login"</span>&#125;</span><br><span class="line">          &lt;button onClick=&#123;setLogin&#125;&gt;toggleLogin&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>我在這邊有遇到一個問題，在 Container component export context，並在 Account 引用 Container export 的 context 時，會發生我取不到值得問題，這是因為循環依賴的關係，在我們 Account 引用 Container 內的 MyContext 時，ES6 只會是 referrence MyContext undefined 狀態，實際在 Container 還尚未建立 createContext，這個 Account 又會再初始化階段就執行 MyContext，導致拿到 empty object。</p><p>解法就是獨立建 MyContext ，解除與 Container 關係，就可以避免掉循環依賴的問題。至於 Consumer 會沒有問題，因為Consumer是在render時才會調用參考，所以會拿到正確的值。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Container File</span></span><br><span class="line"><span class="keyword">import</span> <span class="type">Account</span> from <span class="string">"./components/Account"</span>;</span><br><span class="line">export const <span class="type">MyContext</span> = <span class="type">React</span>.createContext(&#123;</span><br><span class="line">  isLogin: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    isLogin: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line">...  </span><br><span class="line">      &lt;<span class="type">MyContext</span>.<span class="type">Provider</span> value=&#123;&#123; isLogin: isLogin, setLogin: <span class="keyword">this</span>.setLogin &#125;&#125;&gt;</span><br><span class="line">        &lt;<span class="type">Account</span> /&gt;</span><br><span class="line">      &lt;/<span class="type">MyContextProvider</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Account File</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="type">MyContext</span> from <span class="string">"../Container"</span>;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// MyContext undefined</span></span><br><span class="line">  static contextType = <span class="type">MyContext</span>;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// empty object</span></span><br><span class="line">    console.log(<span class="keyword">this</span>.context);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Dan神表示: <a href="https://github.com/facebook/react/issues/13969#issuecomment-474373021" target="_blank" rel="noopener" title="16.6 Context API not working in class component ">React contextType undefined GitHub issue</a></p><p><a href="https://railsware.com/blog/how-to-analyze-circular-dependencies-in-es6/" target="_blank" rel="noopener" title="how-to-analyze es6 circular-dependencies">how-to-analyze es6 circular-dependencies</a></p><ul><li>獨立建立引用 context<br><a href="https://codesandbox.io/s/relaxed-fermat-c097p" target="_blank" rel="noopener" title="file context codesandbox">file context codesandbox</a><iframe src="https://codesandbox.io/embed/relaxed-fermat-c097p?fontsize=12,result" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe></li></ul><h2 id="Hooks-useContext"><a href="#Hooks-useContext" class="headerlink" title="Hooks useContext"></a>Hooks useContext</h2><p>React Hooks 有可以直接調用 Context 的方法，useContext 與 Consumer 特性相似，當沒有 Provider 提供 value，就會以 defaultValue為值，提醒有用到 useContext 的元件當value更新時皆會 rerender，rerender效能不好的話，建議搭配 Memo 來做 memorize。</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">value</span> = useContext(MyContext);</span><br></pre></td></tr></table></figure><p>Preventing rerenders with React.memo and useContext hook.<br><a href="https://github.com/facebook/react/issues/15156#issuecomment-474590693" target="_blank" rel="noopener" title="Preventing rerenders with React.memo and useContext hook.">Preventing rerenders with React.memo and useContext hook.</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext, useMemo &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> MyContext <span class="keyword">from</span> <span class="string">"../context/MyContext"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Account</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isLogin, setLogin &#125; = useContext(MyContext);</span><br><span class="line">  <span class="keyword">return</span> useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"account"</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;isLogin ? <span class="string">"Logout"</span> : <span class="string">"Login"</span>&#125;</span><br><span class="line">          &lt;button onClick=&#123;setLogin&#125;&gt;toggleLogin&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;, [isLogin, setLogin]);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://codesandbox.io/s/gifted-wood-8ot48" target="_blank" rel="noopener" title="useContext with useMemo codesandbox">useContext with useMemo codesandbox</a></p><iframe src="https://codesandbox.io/embed/gifted-wood-8ot48?fontsize=12,result" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>會特別研究寫關於 context API 內容，是因為目前專案幾乎都沒用到，多半還是以 redux 居多，redux 更新版hooks也有 useSelector，也是非常好用，雖然常聽到 useReucer、useContext 幾乎可以取代redux。</p><p>但 redux 有極好用的 debug 工具，devtool 觀看變化、history、dispatch，這些都是無法取代的功能。與夥伴討論過後，認為某些無狀態不需要更新值，我們才會考慮用 context API，因為不需要update，也沒有隨之的監控更新需求。</p>]]></content>
    
    <summary type="html">
    
      React為了解決props 需要傳很多層問題，就在v16.3 更新 context API 的功能，context API 主要功能就是跨元件傳遞資料。利用createContext 建立context，並搭配Provider、Consumer、contexttype、usecontext 跨元件取值。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="react.js" scheme="https://iandays.com/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>Google Analytics 自訂UserId 追蹤數據</title>
    <link href="https://iandays.com/2019/06/15/gauserid/"/>
    <id>https://iandays.com/2019/06/15/gauserid/</id>
    <published>2019-06-15T08:29:52.000Z</published>
    <updated>2019-06-15T17:41:34.472Z</updated>
    
    <content type="html"><![CDATA[<p>分享一個google analytics滿好用的功能，設定User Id，可以讓你直接在報表上找出這個使用者的flow，包括停留時間等等詳細數據，假設你搭配會員系統給予id的話，你也能夠跨裝置的追蹤數據。</p><p>Goolge 說明: <a href="https://support.google.com/analytics/answer/3123666?hl=zh-Hant" target="_blank" rel="noopener" title="設定 User ID">設定 User ID</a></p><h2 id="GA-設定-User-ID"><a href="#GA-設定-User-ID" class="headerlink" title="GA 設定 User ID"></a>GA 設定 User ID</h2><p>GA 點選左下角設定 =&gt; 點選 追蹤設定 =&gt; 點選 User Id =&gt; 點擊 同意條款 =&gt; 點選 下一步<br><img src="/images/gasettinguid.png" alt="gasettinguid" title="gasettinguid"></p><p>建立 User Id 報表<br><img src="/images/gasettinguid2.png" alt="gasettinguid" title="gasettinguid"></p><p>打開 顯示User-id<br><img src="/images/gauserid3.png" alt="gasettinguid" title="gasettinguid"></p><p>這邊千萬千萬要記得要打開UserId的設定，否則你報表看不到客製化的UserId數據。我在這邊卡了2小時，查網路還找不到如何顯示的教學…。</p><h2 id="針對使用者設定-UserId"><a href="#針對使用者設定-UserId" class="headerlink" title="針對使用者設定 UserId"></a>針對使用者設定 UserId</h2><p>接下來就需要定義使用者的UserId，這邊有時候會用會員編號，不要使用敏感性個資去設定即可，能讓你在報表識別出這個人是誰就可以。</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全域網站代碼的追蹤程式碼 (gtag.js)：</span></span><br><span class="line">gtag('set', &#123;'user_id': 'USER_ID'&#125;); <span class="comment">// 使用已登入的 user_id 設定 User ID。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用 Analytics (分析) 追蹤程式碼 (analytics.js)：</span></span><br><span class="line">ga('set', 'userId', 'USER_ID'); <span class="comment">// 使用已登入的 user_id 設定 User ID。</span></span><br></pre></td></tr></table></figure><h3 id="Tag-manager-設定流程"><a href="#Tag-manager-設定流程" class="headerlink" title="Tag manager 設定流程"></a>Tag manager 設定流程</h3><p>稍微提一下 tag manager 設定流程，首先我們需要建立一個變數，因為我 userId 是透過 cookie 傳遞的，所以我這邊先打開<code>變數</code>，點選使用者自定義區塊 -&gt; 點選新增。</p><ul><li><p>選擇自訂JavaScript<br><img src="/images/gtmuid.png" alt="gtm uid" title="gtm uid"></p></li><li><p>function return 代表的是這個變數的值。<br><img src="/images/gtmuidvar.png" alt="gtm uid js" title="gtm uid js"></p></li><li><p>點選 <code>代碼</code> -&gt; 新增/編輯 GA pageView -&gt; 點選 覆蓋變數設定 -&gt; 點選 更多設定 -&gt; 填入 userId 還有剛剛設定的 變數名稱<br><img src="/images/gtmgauid.png" alt="gtm ga uid" title="gtm ga uid"></p></li><li><p>完成後 -&gt; 點選提交 (或是 預覽 測試後再提交)<br><img src="/images/gtmgauidsubmit.png" alt="gtm ga uid submit" title="gtm ga uid submit"></p></li></ul><p>Tag manager非常好用，會用的話可以不透過修改線上程式碼，處理許多問題、功能。</p><h2 id="實際模擬-UserId-設定"><a href="#實際模擬-UserId-設定" class="headerlink" title="實際模擬 UserId 設定"></a>實際模擬 UserId 設定</h2><p>因為blog沒有會員系統，就先麻煩到我剛剛建好的頁面，是使用串接 facebook web sdk 登入。</p><p>登入設定 userId : <a href="https://iandays.com/work/getuid.html" title="登入facebook 設定 userId">登入facebook 設定 userId</a></p><p>進入畫面點擊登入後，我會把 facebook uId 設定到 cookie，之後我會將 cookie 的這個值，設定到 Google analytics UserId 中。</p><p>因為 cookie 沒設定時間所以關掉視窗就會自動清掉了，別怕XD。</p><p>UserId google 政策小提醒:<br><code>您不會上傳任何能讓 Google 識別個人身分的資料 (例如姓名、身分證字號、電子郵件地址等任何類似資料)，或是可永久識別某裝置的資料 (例如無法重設的手機專屬裝置識別碼)。</code></p><h2 id="Google-analytics-報表"><a href="#Google-analytics-報表" class="headerlink" title="Google analytics 報表"></a>Google analytics 報表</h2><p>接下來打開剛剛建立好的GA報表，點選 目標對象 -&gt; 客層管理，就可以看到剛剛設定好的UserId。點擊 UserId 即可看到詳細數據。</p><ul><li><p>UserId 清單<br><img src="/images/gauseridview.png" alt="ga userid view" title="ga userid view"></p></li><li><p>使用者紀錄<br><img src="/images/gauseridinfo.png" alt="ga userid info" title="ga userid info"></p></li></ul><p>假設你再搭配資料庫存取會員，就可以直接的看到所有會員的使用路徑，例如說，我希望看到下單的使用者，都看過哪些頁面的路徑，那你就可以依靠這方式觀察。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>滿詭異的，一開始報表沒出現UserId，查網路解決方法查了很久，沒想到國外都說ga不會顯示UserId…，滿臉問號。</p><p>話說這功能我個人是覺得滿好用的，以前服務公司就有導入使用，可以更快理解、觀察出會員的需求，雖然聽起來滿沒有隱私，很怕被追蹤的話，記得開無痕登出瀏覽網站。</p><p>感謝，有問題再歡迎留言詢問。</p>]]></content>
    
    <summary type="html">
    
      分享一個google analytics滿好用的功能，設定User Id，可以讓你直接在報表上找出這個使用者的flow，包括停留時間等等詳細數據，假設你搭配會員系統給予id的話，你也能夠跨裝置的追蹤數據。
    
    </summary>
    
      <category term="marketing" scheme="https://iandays.com/categories/marketing/"/>
    
    
      <category term="google_analytics" scheme="https://iandays.com/tags/google-analytics/"/>
    
  </entry>
  
  <entry>
    <title>第一份工作</title>
    <link href="https://iandays.com/2019/06/08/firstjob/"/>
    <id>https://iandays.com/2019/06/08/firstjob/</id>
    <published>2019-06-07T17:04:48.000Z</published>
    <updated>2019-06-08T15:30:51.630Z</updated>
    
    <content type="html"><![CDATA[<p>回頭看第一份工作，我從充滿熱情、到充滿自信、最後充滿失望，總共兩年時光，離職前原本心中滿腹抱怨，但現在看只覺得感慨、感激，這就是人生啊。</p><p>第一份工作對我來說很重要，所以我到現在都還記得這些。</p><p><img src="/images/firestjob.png" alt="first job" title="first job"></p><ul><li>我的辦公桌</li></ul><h2 id="加入團隊"><a href="#加入團隊" class="headerlink" title="加入團隊"></a>加入團隊</h2><p>之前提過面試經過，就不多說了。我剛加入團隊時，總共只有4個人，兩個業務、一個團隊主管，再加上我，團隊是隸屬在部門底下，部門共有約15個人。之前業務們是兼著行銷，我進去之後就開始接手粉絲團、部落格，喔對了，這時我們業務模式主要是依賴網路填表名單，再經由業務聯繫引導購買課程。</p><p>我是被指派擴展新的產品線，跟轉學課程相關的，當時手上資源就一個部落格、粉絲團，部落格每天大概150流量，粉絲團大概400個追蹤。每天填表大概1、2筆而已，可以說是非常慘澹。</p><p>前三個月我的週報告數字都非常難看，有時候電話量大，業務都在忙線中，我還要幫忙接電話留資料，跟我同期還有一個女業務Angile，她是應徵行銷被小主管遊說轉業務，我那時滿擔心，主管會不會哪天看不下去，要我轉業務。</p><p>但幸好當時帶我的業務Kelly，他對這塊領域非常精通，因為她是主要負責業務，能直接回饋我學生都在問什麼問題，另外團隊成員都有SEO的觀念，因為團隊前主管有特別專研關係。我那時候先從經營blog著手，每天有空就去看社群有沒有問題，記錄起來變成我文章的內容，大概一週兩篇文章，漸漸的流量成長起來。記得當時還爬上主要關鍵字第一名。</p><p>她跟小主管都是我職場的貴人，讓我不斷地問問題，鼓勵我各種方法嘗試。常會說: 你的想法聽起來不錯，可以去試試看。</p><p>但可惜，過沒多久，她就離職轉換其他職務了。</p><h2 id="曖昧的業績"><a href="#曖昧的業績" class="headerlink" title="曖昧的業績"></a>曖昧的業績</h2><p>團隊每週會有週會，每月會有部門月會，週會主要在業績報告，月會則是各團隊主管報告業績或進度，團隊目前共兩名業務，其中有個老前輩業務阿基，他非常厲害，對公司產品很精通，也擅長跟學生聊天、溝通，所以他業績都是最高。另一個Angile則是還在摸索階段，同時，她也要經營部落格，還要做業績，所以還滿辛苦的。</p><p>因為我是行銷職關係，我工作主要在產生名單給業務成交，也就是說一筆訂單成交會是業務分數字給行銷，但假設客戶來電詢問，業務也要分給行銷。總結來說就是，行銷業績的好與壞與業務息息相關。業績好壞又與薪水的額外加成有關。</p><p>我是能夠理解這看法，因為主管希望團隊業績能總體成長，讓行銷與業務都一起好，行銷只有我狀況下，業務成交業績都會分給我，我每個月都有不少獎金，雖然我不太知道詳細數字，那時候底薪太少也不太去注意。</p><p>但這方法在人多後就不一樣了，行銷職到後面人數擴張為業務兩倍，業務分給行銷方法是均分，也就是說大家行銷不管怎做都會是一樣的薪資。</p><p>當團隊行銷出現free rider，又沒人去介入的話，團隊容易整體擺爛，或是某個行銷表現特別好，卻沒拿到相對應報酬，未來他也不會這麼拼命去做了。</p><p>雖然某方面來說薪水加成頂多幾千塊，但是業績未達標的話，需要每週寫檢討報告，這東西非常麻煩…，公司副總會看，看完會直接盯你狀況。但是沒達標原因，是團隊業績不夠我分，解決辦法團隊業績要整體向上，這問題又不是一個人能解決的。</p><p>恩，這問題很嚴重，直到最後都沒解決。</p><h2 id="團隊擴張"><a href="#團隊擴張" class="headerlink" title="團隊擴張"></a>團隊擴張</h2><p>大概過了半年後，部門主管開始建議團隊要擴張人數，公司總有個神奇想法，就是兩倍的人數就要有兩倍的營業額，恩…，各種問號，沒把邊際效益算進來。</p><p>後面新進同事Austin，部門終於有第二個行銷職同事了，後續陸續補了行銷Song，然後又把部門行政轉職成行銷，很迅速的成長到7人的規模。</p><p>說實在那時候我對帶新人這件事滿沒看法的，幾乎都是教完各資源使用方法，就開始讓大家各自努力，被同事問問題，我還滿常白目的回答，啊就直接Google xxxx啊，幾乎沒有盡到帶人責任。外加團隊是新人就要開發新的產品線，一開始挫折感非常的重。</p><p>這時候有趣的事發生，公司另外成立了網路行銷團隊，招募大概6個人，要與我們做業績競爭，每個月會招開會議，對我們數字做檢討。</p><h2 id="兩團隊競爭"><a href="#兩團隊競爭" class="headerlink" title="兩團隊競爭"></a>兩團隊競爭</h2><p>以往只會有副理每月參與開會，但往後會是兩個團隊一起開每月會議，參與會議的還有董事長、執行長、雙方部門主管。</p><p>這時候，大家就開始戰戰兢兢的拼業績，因為業績只要不好、或比對方低，董事長就需要我們作出對應調整。</p><p>每個月業績不足，大家報告中，各種方法解決問題，不乏是優化SEO、網路廣告、提升文章曝光度、舉辦活動等等。</p><p>一方面業績不夠，但董事長又希望雙方團隊能擴張人數，解決業績不足的問題。雖然人數提升，業績確實可能改善，但這是在新進人員能快速貢獻出產能前提下，公司在招募員工薪資預算較低，比較不容易找到有經驗的人才，人員進來還需要一段時間學習，需要時間才可能提升業績。</p><p>這段時間新人還可能業績持續掛零，主管會持續關切，而讓新人備感壓力，轉而離職。這狀況輪迴大概看了好次。</p><p>大概入職7個月後，也就是開始競爭幾個月，我們也補進1個行銷Benny、2個業務Hu、惠仙。</p><p>印象最深刻是，Benny第一天上班，居然跟我90度鞠躬說: 請多多指教，我還真是第一次遇到同事跟我鞠躬，真特別。</p><h2 id="公司文化"><a href="#公司文化" class="headerlink" title="公司文化"></a>公司文化</h2><p>因為兩個團隊競爭，開始接觸到執行長、董事長，他們會不斷的鼓勵大家，要大家下班好好進修，然後要大家養成學習的習慣。副總也會如此，要大家多閱讀文章，增廣見聞。</p><p>這是我覺得公司文化最棒的地方，會鼓勵員工進修學習，雖然沒有進修補助XD。</p><p>比較不好的地方在於全民皆兵，幾乎每個職務都要掛上業績，業績不夠就是檢討報告，非常業務導向的公司政策。</p><p>還會有常態的教育訓練，會是專注在公司的產品介紹，沒有著墨在職能的教育，假設你是行銷相關，但是其他也很重要的網路廣告、經營社群、SEO等等，在這邊的教育訓練是學習不到，這個點比較不太好。</p><p>有點官僚的制度，常常會讓底下員工看不清公司政策方向。</p><h2 id="下班時間增進專業"><a href="#下班時間增進專業" class="headerlink" title="下班時間增進專業"></a>下班時間增進專業</h2><p>平時下班大概會花3小時研究與行銷相關的專業，有些是數據追蹤google analytics，但主要是專注在SEO上，因為剛入職時，常常聽同事在講SEO的重要性，運氣很好的狀況下，我經營的部落格搜尋排名成長不少，開始想知道怎樣的文章會比較容易有好的排名。</p><p>漸漸的在這時候養成下班學習的習慣。</p><p>以前剛入職時，會在家裡自己加班處理公務，後面還接手經營某個外部社群，為了這件事情我花了不少時間，雖然是我自己選擇要去管理的，但過陣子發現，換來的只是主管單純的鼓勵，對我只是虛耗時間。</p><p>如果你自主花費下班時間處理公務，但對你自己本身沒有幫助，就不要花時間了，轉去研究對你自己專業更有幫助的事情。</p><h2 id="世界真大"><a href="#世界真大" class="headerlink" title="世界真大"></a>世界真大</h2><p>入職後一年左右，某天剛好看到awoo宣傳講座，以前就有聽過這間專門做SEO的公司，講座又是免費參加的，我就跟Austin、Benny一起報名參加了。這是我第一次參加外部的講座，我才知道原來台灣也是滿多人在做SEO，一直以為只有我們公司著重而已。</p><p>大概是幾個團隊分享做SEO作法、感想，詳細內容不大記得了，只記得最後有去問阿吾問題，我問他bing要怎處理SEO，沒記錯他當時是回答了處理上非常困難。他還順便歡迎大家去他們公司面試。</p><p>那時候騎車回家路上，其實滿腔熱血，讓我知道，原來純粹SEO就會是個職務，想知道自己能力是多少，也覺得自己是井底之蛙，世界真大啊！</p><h2 id="競爭部門重組解散"><a href="#競爭部門重組解散" class="headerlink" title="競爭部門重組解散"></a>競爭部門重組解散</h2><p>入職大概一年多，兩個團隊業績雖然有成長，但成長幅度與人數成長沒有成正比，公司不停的轉換經營網路的策略，曾經思考過是否要做個學生相關的平台，或是讓我們全部兼著業務做。</p><p>跟我們競爭部門的同事整組換了一輪，後面甚至解散改組，現在回過頭來看，公司對兩個團隊的資源分配管理上，都有滿多問題，兩個團隊人數加起來大概是18人，因為公司產品就那些，雙方做的事情完完全全重疊，甚至還出現關鍵字廣告互相競爭的狀況，現在看起來滿荒謬的。但在那時光背景下，誰只要輸了就會被解散或被合併。</p><p>還有人員的專業度問題，公司總認為每個新人都能快速吸收前輩的專業，但實際上不是這麼簡單的，新進員工常會呈現不知所措，然後業績持續掛零。</p><p>或是前人離職，交接完作業流程後，忽略了最重要的轉移專業，導致員工一離職後，部門就直接損失這塊業績。應該要鼓勵員工舉辦類似workshop，互相學習。</p><p>也要分專業領域去組織團隊成員，假設這邊需要SEO，那應該要找這塊專門的主管、或員工，如果需要關鍵字廣告，那也要找這塊專家，經營粉絲團同樣也是。但這前提條件是，因為要找專業度較高員工，所以要提高招募的預算，恩…，這問題幾乎無解。</p><h2 id="同事一起學習"><a href="#同事一起學習" class="headerlink" title="同事一起學習"></a>同事一起學習</h2><p>前面那位Benny是資工系的，他常常會問我SEO相關問題，不過我常常用很沒邏輯的答案回答他，因為google會這樣啊、因為我之前這樣寫排名就會好啊。這樣的回答常常被他質疑，我才漸漸覺得，其實google也只是程式，背後一定有它的邏輯，後面才開始用更邏輯的態度去面對SEO。</p><p>後面開始操作google adword，我跟Austin、Benny還花了不少時間研究了google adword的機制，後面也有不錯的成效，記得那時候我邊在外面走路，還邊看google教學影片，只是希望能快速找出google adword操作訣竅。</p><p>過了一年多，這時候剛好家裡招牌要架設網站，所以開始研究怎麼架網站、寫CSS。我那時候是跟Benny一起學CSS的，各種研究怎排版、各種style。還記得，Benny第一天學了CSS後，就跑去awoo面試，雖然結果沒上，但這行動力著實讓我敬佩。</p><p>話說很佩服小主管招募人員眼光，同事之間的相處、溝通都非常好，常會覺得這樣的同事是怎被騙進來的XD。</p><h2 id="Benny大崩潰"><a href="#Benny大崩潰" class="headerlink" title="Benny大崩潰"></a>Benny大崩潰</h2><p>因為太好笑了，我一定要提這件事情。部門內部開發行銷類進修課程，當天會先有個免費的講座，再引導購買課程，希望我們團隊負責推廣，負責的主要是Austin、Benny，記得那時候每天看他們在開會，各種研究如何曝光、收名單，那時候與部門主管訂下了KPI門檻，大概是70筆名單。</p><p>我也會參與他們討論，一起研究怎樣的課程會對網路行銷職務最有幫助，最後定案課程是SEO、文案撰寫、社群經營。</p><p>名單在講座舉辦前幾天達標了，大家都很期待當天講座會有多少人付費課程。我對這課程還滿有信心，連我都滿有興趣的。</p><p>但講座當天結束後，才知道大概只有幾位報名…。</p><p>聽Benny轉述，當天情況十分慘烈，講師是部門主管擔任，沒有特別去聘請外部講師。演講的內容不乏介紹電商營業額，網路趨勢或是大數據等等，甚至還講比爾蓋茲的女婿故事，演講內容幾乎沒有著墨網路行銷專業介紹。</p><p>講座完，還有發回饋問卷，回饋內容幾乎都在評論講者的不專業，或是覺得浪費時間等等。當天，Benny還跑去買啤酒喝，生氣到覺得自己太傻，居然忘記最重要環節是講座的講者。</p><p>那次事件後，我們都對部門主管抱持一種失望、不信任態度。</p><h2 id="轉職"><a href="#轉職" class="headerlink" title="轉職"></a>轉職</h2><p>入職一年半，我跟Benny花了3、4個月時間學了javascript、HTML、CSS，我完成家裡招牌的網頁，他也離職去某公司擔任軟體工程師了，雖然他進去之後沒寫網頁，是寫C#。</p><p>他離職影響我滿大的，少了一起研究網頁技術的同事，後面滿多技術都只能自己摸索，後面幾個月確實進步幅度變小許多。我那時候對javascript還不是很熟悉，頂多做一些簡單的效果。</p><p>那時候剛好遇到公司培訓主管計畫，但我並沒有參加，因為需要經過一段培訓，培訓需要大約半年到一年時間，還需要額外花時間參加教育訓練。前面有提到，我對公司教育訓練是比較不信任的。當下我也對我自己專業度抱持懷疑，我覺得在行銷上專業度還不夠擔任主管，我對主管看法就是，要能夠教學、帶領同仁成長。</p><p>培訓幹部還有Benny離職，也讓我思考我人生下一步，要繼續行銷職，還是嘗試寫網頁轉換跑道。我那時候是覺得寫網頁很有趣、好玩，比起行銷來說，寫網頁更具創造力、成就感。</p><p>寫的第一個程式: <a href="https://iandays.com/work/lunch.html" title="午餐吃什麼">午餐吃什麼</a></p><p>過了幾個月，我剛好家裡親戚過世，讓我更覺得要把握時間，剛好翻到某個ptt，後面有寫上，只要有前端求職上問題都可以找他。就打開facebook messenger敲他，原先只是想問問面試相關問題，沒想到他居然出功課要我完成，完成後再讓我拿作品去面試，大概就是網頁切版，還有串接api呈現畫面，是到後面才知道他是六角的創辦人。</p><p>剛好入職兩年左右。</p><p>我開始拿著這些作品面試，很幸運的，我就找到前端工程師的工作了。很感激六角的創辦人，他也是我入坑的貴人。</p><h2 id="第一份工作重要性"><a href="#第一份工作重要性" class="headerlink" title="第一份工作重要性"></a>第一份工作重要性</h2><p>雖然我第一份工作不是特別挑的，是只有這個有錄取，但很幸運，我的團隊主管是個好主管，善於傾聽，總是會鼓勵我嘗試新作法，也不太管我上班在做什麼，甚至後面還讓我寫了些網頁，這些面試都剛好當作作品集。</p><p>團隊同事也非常好相處，雖然這裡的福利不太好，公司常常有很多怪異政策，或許是共患難精神，大家每天上班都很開心，幾乎都沒有鬥爭、隔閡。</p><p>原本我對工作觀念就是，上班是同事，下班不認識，但後面被同事改變了我的看法，同事間不一定要特別疏遠，好相處的也可以當作朋友。</p><p>沒有進這間公司，認識這些同事，或許我今天就不會轉換跑道了。</p>]]></content>
    
    <summary type="html">
    
      回頭看第一份工作，我從充滿熱情、到充滿自信、最後充滿失望，總共兩年時光，離職前原本心中滿腹抱怨，但現在看只覺得感慨、感激，這就是人生啊。
    
    </summary>
    
      <category term="life" scheme="https://iandays.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>React Hooks Performance 效能處理</title>
    <link href="https://iandays.com/2019/06/01/reacthooks/"/>
    <id>https://iandays.com/2019/06/01/reacthooks/</id>
    <published>2019-06-01T05:46:57.000Z</published>
    <updated>2019-06-09T04:48:17.300Z</updated>
    
    <content type="html"><![CDATA[<p>React發布了幾個月的Hooks，最近也開始嘗試接觸，後面會稍微提一下PureComponent，不會介紹hooks各種特殊用法，就只針對hooks performance優化做介紹，還有搭配redux的處理。</p><p>因為前陣子有處理過React優化效能，對於這件事情也開始在意，讓人絕望的google page speed…。</p><p><img src="/images/reacthooks.png" alt="react lifecycle" title="react lifecycle"></p><h2 id="React-PureComponent"><a href="#React-PureComponent" class="headerlink" title="React PureComponent"></a>React PureComponent</h2><p>如果有在注意效能的話，你應該會聽過shouldComponentUpdate或PureComponent，這是較常見的處理方法，Purecomponent只關注state、props並作shallow equal比較，當不同值才會觸發 rerender。</p><p><a href="https://reactjs.org/docs/shallow-compare.html" target="_blank" rel="noopener" title="shallow-compare">React shallow-compare</a></p><p>以下是有無使用Purecomponent的比較，當我更新某個state，而這個state沒有傳進作為props，PureComponent會過濾掉更新。</p><p>使用教學: 你可以嘗試更新input text，會發現Purecomponent數字不會增加，而一般component則是會增加。這數字增加代表著react嘗試update Component次數。</p><p>這數字不代表是否真的更新dom，因為react會比較render後dom結構的不同，再決定是否更新某節點dom，但嚴格來說這也算是種浪費效能。</p><iframe src="https://codesandbox.io/embed/serene-murdock-t7ih2?fontsize=14,result" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe><ul><li>PureComponent code<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckboxPure</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      done: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.times = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  changeCheck = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      done: e.target.checked</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  componentWillUpdate() &#123;</span><br><span class="line">    <span class="keyword">this</span>.times = <span class="keyword">this</span>.times + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; done &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> &#123; text &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;PureComponent component Try Update time &#123;<span class="keyword">this</span>.times&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input onClick=&#123;this.changeCheck&#125; type="checkbox" checked=&#123;done&#125; /</span>&gt;</span><br><span class="line">          &#123;text&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CheckboxPure;</span><br></pre></td></tr></table></figure></li></ul><p>ps. PureComponent不是全部都用，需要注意props的更新關係。假設你上層的update，一定會更動到PureCompoent的props，那你應該避免使用PureComponent，因為每次接受到props時，PureComponent還會多做一次shallow compare，那因為每次都一定更新props，多做比較就等於浪費效能，比起用一般方法還不好。</p><h2 id="React-hooks-functional"><a href="#React-hooks-functional" class="headerlink" title="React hooks functional"></a>React hooks functional</h2><p>前面會提到PureComponent，是因為react hooks是全面的使用functional Component，這代表我們不會在使用Class，以往Class使用是繼承React並讓我們建立instance，有instance就代表有memory位置，可以讓我們處理資料比較。functional代表我們只要調用一次更新，所有的react hooks function都會再被調用一次。</p><p>舉例來說，將關注點變到更小，所以useEffect才能實現像是componentDidUpdate的功能。</p><ul><li>Hooks like componentDidUpdate<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// it will setting title everytime when render function</span></span><br></pre></td></tr></table></figure></li></ul><p>useEffect就是一個例子，你看到useEffect的額外第二個參數，useEffect會綁定count更新，才會調用callback。</p><ul><li>Hooks useEffect bind count<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); </span><br><span class="line"><span class="comment">// Only setting title if count changes</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="React-hooks-實現todoList"><a href="#React-hooks-實現todoList" class="headerlink" title="React hooks 實現todoList"></a>React hooks 實現todoList</h2><p>嘗試建立一個toDo List，方便我們來看怎樣讓React hooks實現PureComponent的特性。我們會需要建立三個檔案，分別是是container/todoView、component/todoLis、hooks/useTodoList。</p><p>假設你已經用過react hooks，這部分可以直接略過。</p><p>首先建立container/TodoView，我們會需要建立toDo的Array，這邊我們會用到useState，還有useRef，讓我們能夠取得input value，剩下部份就是更新處理todoList state。</p><ul><li>React hooks function<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// toDo array </span></span><br><span class="line"><span class="keyword">const</span> [todoList, setTodoList] = useState([]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create inputRef</span></span><br><span class="line"><span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// add Array</span></span><br><span class="line"><span class="keyword">const</span> addTodo = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  <span class="keyword">if</span> (!inputEl.current.value) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> mergeArr = [...todoList, inputEl.current.value];</span><br><span class="line">  inputEl.current.value = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">return</span> setTodoList(mergeArr);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete Array by index</span></span><br><span class="line"><span class="keyword">const</span> deleteToDo = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = [...todoList];</span><br><span class="line">  newArr.splice(index, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> setTodoList(newArr);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>建立hooks/useTodoList，並把上面這些hooks function移動過去。就完成了todoList的自製hooks。</p><ul><li>hooks/useTodoList.js<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useCallback &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useTodoList</span>(<span class="params">value, inputEl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [todoList, setTodoList] = useState(value);</span><br><span class="line">  <span class="keyword">const</span> addTodo = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">if</span> (!inputEl.current.value) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> mergeArr = [...todoList, inputEl.current.value];</span><br><span class="line">    inputEl.current.value = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">return</span> setTodoList(mergeArr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> deleteToDo = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newArr = [...todoList];</span><br><span class="line">    newArr.splice(index, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> setTodoList(newArr);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [todoList, addTodo, deleteToDo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useTodoList;</span><br></pre></td></tr></table></figure></li></ul><p>會多建立一個 <code>const [count, setCount] = useState(0);</code>，讓我們在這層setState，並觀察TodoList更新狀況。</p><ul><li>container/TodoView.js<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useRef &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">"../component/TodoList"</span>;</span><br><span class="line"><span class="keyword">import</span> useTodoList <span class="keyword">from</span> <span class="string">"../hooks/useTodoList"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TodoView</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [todoList, addTodo, deleteToDo] = useTodoList([], inputEl);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use to update TodoView</span></span><br><span class="line">  <span class="comment">// let us check TodoList update situation</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;span&gt;Counter : &#123;count&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Add Counter&lt;/</span>button&gt;</span><br><span class="line">      &lt;form className=<span class="string">"input-container"</span> onSubmit=&#123;addTodo&#125;&gt;</span><br><span class="line">        &lt;input ref=&#123;inputEl&#125; placeholder=<span class="string">"Type your to Do"</span> /&gt;</span><br><span class="line">        &lt;button className=<span class="string">"add-button"</span>&gt;Create&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">      &lt;TodoList todoList=&#123;todoList&#125; deleteToDo=&#123;deleteToDo&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TodoView;</span></span><br></pre></td></tr></table></figure></li></ul><p>額外再加上toDoList.js加上計算器，每次的render function都會加上1，方便我們看toDoList重新render的次數。</p><ul><li>component/TodoList.js<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TodoList</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; todoList, deleteToDo &#125; = props;</span><br><span class="line">  count = count + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"list"</span>&gt;</span><br><span class="line">      TodoList render Times &#123;count&#125;</span><br><span class="line">      &#123;todoList.map(<span class="function">(<span class="params">value, index</span>) =&gt;</span> (</span><br><span class="line">        &lt;li className=<span class="string">"list-item"</span> key=&#123;<span class="string">`to_<span class="subst">$&#123;index&#125;</span>`</span>&#125;&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &#123;index + <span class="number">1</span>&#125;. &#123;value&#125;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;span onClick=&#123;() =&gt; deleteToDo(index)&#125;&gt;-&lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      ))&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TodoList;</span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/fervent-gould-qyekg?fontsize=14,result" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe></li></ul><h2 id="React-hooks-效能處理"><a href="#React-hooks-效能處理" class="headerlink" title="React hooks 效能處理"></a>React hooks 效能處理</h2><p>我們已經完成了簡易版的todoList，當你輸入input建立後，會發現TodoList會更新一次，但是你點擊count後，會發現TodoList居然也會更新，這是因為所有的component已經都是純functional component，當我們最上層更新state，都會一路往下更新到底層。</p><p>這時候我們就必須依賴React.memo，React.memo是一個high Order Component，功能就像是PureComponent，讓我們擋住調用更新function，但差異在於memo是用在於function components，並會幫我們memory住props，只在props更新才會往下更新。</p><p><a href="https://reactjs.org/docs/react-api.html#reactmemo" target="_blank" rel="noopener" title="React memo">React memo</a></p><ul><li>component/TodoList<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use React memo for TodoList;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(TodoList);</span><br></pre></td></tr></table></figure></li></ul><p>更新上去後，讓我們在嘗試點擊count，觀察TodoList是否就卡住更新了。</p><p>你會發現數字還是增加。</p><p>查看上層傳進的props後，發現還有一個問題，就是傳進去的function，每次都會是一個新的function。因為沒有function沒有memory住，導致每次都會render後都會重新建立addTodo、deleteToDo，所以對toDoList的memo來說，你每次都給我新的props function，當然會每次都更新component。</p><iframe src="https://codesandbox.io/embed/adoring-dream-j01do?fontsize=14,result" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe><p>幸好react hooks有提供useCallback，讓我們可以把function memory起來，useCallback會需要依賴第二個參數，讓他比較判斷是否要更新function。</p><ul><li>React hooks useCallback<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedCallback = useCallback(</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    doSomething(a, b);</span><br><span class="line">  &#125;,</span><br><span class="line">  [a, b],</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://reactjs.org/docs/hooks-reference.html#usecallback" target="_blank" rel="noopener" title="React usecallback">React hooks usecallback</a></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> addTodo = useCallback(</span><br><span class="line">  event =&gt; &#123;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">    <span class="keyword">if</span> (!inputEl.current.value) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> mergeArr = [...todoList, inputEl.current.value];</span><br><span class="line">    inputEl.current.value = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">return</span> setTodoList(mergeArr);</span><br><span class="line">  &#125;,</span><br><span class="line">  [todoList, inputEl]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deleteToDo = useCallback(</span><br><span class="line">  index =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newArr = [...todoList];</span><br><span class="line">    newArr.splice(index, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> setTodoList(newArr);</span><br><span class="line">  &#125;,</span><br><span class="line">  [todoList]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>更新上去後，再嘗試點擊count看看，會發現toDoList終於沒有更新數字了。這樣就完成了hooks的render效能處理。使用React.memo實現了類似PureComponent的功能，再解決掉function components沒有memory的問題，讓我們todo、delete function，都不會因為function component被更新而重新被建立。</p><iframe src="https://codesandbox.io/embed/floral-bash-dv708?fontsize=14,result" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="增加-Redux"><a href="#增加-Redux" class="headerlink" title="增加 Redux"></a>增加 Redux</h2><p>另外改用redux管理todo資料，沒有特別用最新react-redux的hooks版本，因為還在alpha階段。基本上就移除掉useState，建立store、reducer，再建立Provider，還有state、dispatch傳遞到需要使用的元件上。</p><p>不想偏離主題就直接貼上作法了。</p><p>Source code: <a href="https://github.com/Ianpig/hooks-try" target="_blank" rel="noopener" title="React hooks with redux">React hooks with redux</a></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>因為準備要開始運用hooks在專案上，才發現function components要注意的問題，遠比我想像的還多。以往react class的寫法，react處理了component的rerender問題，但改為function components後，多了處理rerender的問題。</p><p>個人覺得用過class在轉用hooks後，lifeCycle的部分最不習慣，感覺拉高了點React的學習門檻。hooks讓react的複用單位拉到在更小，用得好確實能夠加速開發，期待日後實際運用hooks在專案上後能有更多心得分享。</p>]]></content>
    
    <summary type="html">
    
      React發布了幾個月的Hooks，最近也開始嘗試接觸，後面會稍微提一下PureComponent，不會介紹hooks各種特殊用法，就只針對hooks performance優化做介紹。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="react.js" scheme="https://iandays.com/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>Google Sheet RESTful API 試算表表單</title>
    <link href="https://iandays.com/2019/05/11/googleformadv/"/>
    <id>https://iandays.com/2019/05/11/googleformadv/</id>
    <published>2019-05-11T04:51:14.000Z</published>
    <updated>2019-06-08T04:41:32.430Z</updated>
    
    <content type="html"><![CDATA[<p>嗨，接下來要來分享google excel api之前未完成的部分，前面介紹了建立api，讓我們能在google excel新資料，但是透過api管理資料還差讀取、更新表單資料，簡單講就是API的CRUD。</p><p>後面會完成API串接做查詢、更新資料，還有簡單的前端操作畫面。</p><p>完成畫面: <a href="https://iandays.com/work/friedQuery.html" title="鹹酥雞查詢訂單">鹹酥雞查詢訂單</a><br><img src="/images/sheetapiquery.png" alt="google sheetapiquery" title="google sheetapiquery"></p><ul><li><p>前文章連結 : <a href="https://iandays.com/2018/02/08/googleformapi/index.html" title="Google sheet 試算表表單串接api">Google sheet 試算表表單串接api </a></p></li><li><p>Google 官方文件 <a href="https://developers.google.com/apps-script/reference/spreadsheet/sheet" target="_blank" rel="noopener" title="google sheet api">spreadsheet method</a></p></li><li><p><a href="http://iandays.com/work/%E7%82%B8%E9%9B%9E%E8%A8%82%E8%B3%BC" title="鹹酥雞訂購 範例網頁">鹹酥雞訂購 範例網頁</a>、<a href="https://docs.google.com/spreadsheets/d/1JbXssixJaqTL_BMgnmOiMxLyAZm0jOkw173VdewqO9c/edit#gid=0" target="_blank" rel="noopener" title="鹹酥雞訂購 Excel">鹹酥雞訂購 Excel</a></p></li></ul><h2 id="查詢訂單api"><a href="#查詢訂單api" class="headerlink" title="查詢訂單api"></a>查詢訂單api</h2><p>鹹酥雞訂購的填表，還需要增加一個功能，就是客人需要查詢訂單的狀態，有沒有成功送出訂單，還有老闆有沒有幫我確認製作，不然跑去現場然後老闆忘記做餐…。</p><p>會是用填表姓名還有電話查詢。這邊用比較特別的處理方法，我們直接拉出電話陣列，直接比對電話號碼是否存在，有存在號碼會再比對姓名是否相符。才會回拋出資料。我沒特別研究BigQueryDataSourceSpecBuilder，貌似可以直接下query語法。</p><p>這邊改用doPost，首先起手一樣用getSheets先取得我們的tab，使用getSheetValues來拿到整包資料。拿到的資料會是陣列，我們可以跑迴圈來找出每一筆的name、phone，有沒有在陣列內，有的話才要增加到回傳的陣列。最後回傳資料會是一包陣列裡面會是{data: [ ], index: x}，index方便我們後續做更新的操作。</p><p><code>getSheetValues(startRow, startColumn, numRows, numColumns)</code></p><p>ps.儲存發布記得要再新增版本，這邊我卡了1小時…。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="keyword">do</span><span class="constructor">Post(<span class="params">e</span>)</span> &#123;</span><br><span class="line">  var params = e.parameter;</span><br><span class="line">  var name = params.name;</span><br><span class="line">  var phone = params.phone;</span><br><span class="line"></span><br><span class="line">  var SpreadSheet = <span class="module-access"><span class="module"><span class="identifier">SpreadsheetApp</span>.</span></span><span class="keyword">open</span><span class="constructor">ById(<span class="string">"1JbXssixJaqTL_BMgnmOiMxLyAZm0jOkw173VdewqO9c"</span>)</span>;</span><br><span class="line">  var Sheet = <span class="module-access"><span class="module"><span class="identifier">SpreadSheet</span>.</span></span>get<span class="constructor">Sheets()</span><span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line"></span><br><span class="line">  var LastRow = <span class="module-access"><span class="module"><span class="identifier">Sheet</span>.</span></span>get<span class="constructor">LastRow()</span>;</span><br><span class="line">  var data = <span class="literal">[]</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get All data as Array</span></span><br><span class="line">  <span class="comment">// first row, first column, last row, seven columns</span></span><br><span class="line">  var listAll = <span class="module-access"><span class="module"><span class="identifier">Sheet</span>.</span></span>get<span class="constructor">SheetValues(1, 1, LastRow, 7)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find phone and name mapping data and Push Array</span></span><br><span class="line">  for(var i = <span class="number">0</span>;i &lt; <span class="built_in">list</span>.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(listAll<span class="literal">[<span class="identifier">i</span>]</span>.index<span class="constructor">Of(<span class="params">phone</span>)</span><span class="operator"> === </span><span class="number">1</span><span class="operator"> &amp;&amp; </span>listAll<span class="literal">[<span class="identifier">i</span>]</span>.index<span class="constructor">Of(<span class="params">name</span>)</span><span class="operator"> === </span><span class="number">0</span>)&#123;</span><br><span class="line">      data.push(&#123;data: listAll<span class="literal">[<span class="identifier">i</span>]</span>, index: i + <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return data as JSON</span></span><br><span class="line">  return <span class="module-access"><span class="module"><span class="identifier">ContentService</span>.</span></span>create<span class="constructor">TextOutput(JSON.<span class="params">stringify</span>(<span class="params">data</span>)</span>)</span><br><span class="line">    .set<span class="constructor">MimeType(ContentService.MimeType.JSON)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developers.google.com/apps-script/reference/spreadsheet/sheet#getSheetValues(Integer,Integer,Integer,Integer)" target="_blank" rel="noopener" title="google sheet getSheetValues">google sheet getSheetValues</a></p><p>這樣就完成了查詢訂單的api，當我們用post請求api，並且帶上name、phone的參數，就會幫我們查詢並回傳符合比對的資料。</p><p>建議安裝postman，方便直接測試api。</p><p><img src="/images/postmanapipost.png" alt="postmanapi post" title="postmanapi post"></p><h2 id="更新訂單api"><a href="#更新訂單api" class="headerlink" title="更新訂單api"></a>更新訂單api</h2><p>客人送出訂單後，可能需要取消訂單，這時候就需要對資料更新了。我們可以搭配查詢api，讓客人看到自己的訂單，再對訂單更新狀態。我們用前面做好的doPost function，直接擴展增加更新的功能。</p><p>增加action，作為查詢、刪除的判斷，再稍微整理一下拆分共用的邏輯，把執行部分打包成function。建立updateData，專門更新訂單的狀態，我們取得index，直接查詢這個row的資料，拿請求的name、phone直接比對是否符合，符合的話才讓使用者可以更新訂單狀態。</p><p>另外我們定義處理狀態 0 代表訂單取消，1 代表完成訂單。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="keyword">do</span><span class="constructor">Post(<span class="params">e</span>)</span> &#123;</span><br><span class="line">  var params = e.parameter;</span><br><span class="line">  var name = params.name;</span><br><span class="line">  var phone = params.phone;</span><br><span class="line">  var status = params.status;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add action filter post function</span></span><br><span class="line">  var action = params.action;</span><br><span class="line">  </span><br><span class="line">  var SpreadSheet = <span class="module-access"><span class="module"><span class="identifier">SpreadsheetApp</span>.</span></span><span class="keyword">open</span><span class="constructor">ById(<span class="string">"1JbXssixJaqTL_BMgnmOiMxLyAZm0jOkw173VdewqO9c"</span>)</span>;</span><br><span class="line">  var Sheet = <span class="module-access"><span class="module"><span class="identifier">SpreadSheet</span>.</span></span>get<span class="constructor">Sheets()</span><span class="literal">[<span class="number">0</span>]</span>;</span><br><span class="line">  var data = '';</span><br><span class="line">  <span class="keyword">if</span> (action<span class="operator"> === </span>'query') &#123;</span><br><span class="line">    data = query<span class="constructor">Data(Sheet, <span class="params">name</span>, <span class="params">phone</span>)</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action<span class="operator"> === </span>'delete')&#123;</span><br><span class="line">    data = update<span class="constructor">Data(Sheet, <span class="params">name</span>, <span class="params">phone</span>, <span class="params">status</span>, <span class="params">index</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="module-access"><span class="module"><span class="identifier">ContentService</span>.</span></span>create<span class="constructor">TextOutput(JSON.<span class="params">stringify</span>(<span class="params">data</span>)</span>)</span><br><span class="line">    .set<span class="constructor">MimeType(ContentService.MimeType.JSON)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> queryData (Sheet, name, phone)&#123;</span><br><span class="line">  var LastRow = <span class="module-access"><span class="module"><span class="identifier">Sheet</span>.</span></span>get<span class="constructor">LastRow()</span>;</span><br><span class="line">  var data = <span class="literal">[]</span>;</span><br><span class="line">  var listAll = <span class="module-access"><span class="module"><span class="identifier">Sheet</span>.</span></span>get<span class="constructor">SheetValues(1, 1, LastRow, 7)</span>;</span><br><span class="line">  for(var i = <span class="number">0</span>;i &lt; listAll.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(listAll<span class="literal">[<span class="identifier">i</span>]</span>.index<span class="constructor">Of(<span class="params">phone</span>)</span><span class="operator"> === </span><span class="number">1</span><span class="operator"> &amp;&amp; </span>listAll<span class="literal">[<span class="identifier">i</span>]</span>.index<span class="constructor">Of(<span class="params">name</span>)</span><span class="operator"> === </span><span class="number">0</span>)&#123;</span><br><span class="line">      data.push(&#123;data: listAll<span class="literal">[<span class="identifier">i</span>]</span>,index: i &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// update use function</span></span><br><span class="line"><span class="keyword">function</span> update<span class="constructor">Data(Sheet, <span class="params">name</span>, <span class="params">phone</span>, <span class="params">status</span>, <span class="params">index</span>)</span>&#123;</span><br><span class="line">  var checkName = <span class="module-access"><span class="module"><span class="identifier">Sheet</span>.</span></span>get<span class="constructor">SheetValues(<span class="params">index</span>, 1, 1, 1)</span><span class="operator"> == </span>name;</span><br><span class="line">  var checkPhone = <span class="module-access"><span class="module"><span class="identifier">Sheet</span>.</span></span>get<span class="constructor">SheetValues(<span class="params">index</span>, 2, 1, 1)</span><span class="operator"> == </span>phone;</span><br><span class="line">  <span class="keyword">if</span>(checkName<span class="operator"> &amp;&amp; </span>checkPhone)&#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">Sheet</span>.</span></span>get<span class="constructor">Range(<span class="params">index</span>, 7)</span>.set<span class="constructor">Value(<span class="params">status</span>)</span>;</span><br><span class="line">    return 'success';</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端畫面"><a href="#前端畫面" class="headerlink" title="前端畫面"></a>前端畫面</h2><p>這樣就完成了查詢、更新訂單的api了，剩下就是網頁前端部分，網頁需求是讓使用者輸入姓名、電話查詢訂單，或是查詢後可以取消訂單。</p><p>前端主要的function就這些，主要就是查詢拉資料，更新List清單，點擊取消訂單的按鈕，請求API更新狀態等等。</p><p>前端畫面比起API來說，就比較單純這邊不多贅述了。要用vanilla javascript、jquey、或react、vue，看你喜歡都可以做到一樣功能。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-lg-12 text-center"</span>&gt;</span><br><span class="line">        &lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">"mt-5"</span>&gt;查詢訂單&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="form-group col-xs-12"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;label for="pwd"&gt;姓名:&lt;/</span>label&gt;</span><br><span class="line">          &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"name"</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="form-group col-xs-12"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;label for="pwd"&gt;電話:&lt;/</span>label&gt;</span><br><span class="line">          &lt;input type=<span class="string">"number"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> id=<span class="string">"phone"</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="form-group col-xs-12"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;button type="button" id="send" class="btn btn-primary col-xs-12"&gt;送出查詢&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="form-group col-xs-12"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;table class="table table-striped" style="display: none;"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;thead&gt;</span></span><br><span class="line"><span class="regexp">              &lt;tr&gt;</span></span><br><span class="line"><span class="regexp">                &lt;th&gt;Name&lt;/</span>th&gt;</span><br><span class="line">                &lt;th&gt;Phone&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">                &lt;th&gt;Time&lt;/</span>th&gt;</span><br><span class="line">                &lt;th&gt;Item&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">                &lt;th&gt;Price&lt;/</span>th&gt;</span><br><span class="line">                &lt;th&gt;Status&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">                &lt;th&gt;Update&lt;/</span>th&gt;</span><br><span class="line">              &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>thead&gt;</span><br><span class="line">            &lt;tbody id=<span class="string">"dataView"</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>table&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-xs-12 text-center"&gt;純屬線上訂購 demo&lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    $(function()&#123;</span></span><br><span class="line"><span class="regexp">        $('#send').click(function(e)&#123;</span></span><br><span class="line"><span class="regexp">            var status = true;</span></span><br><span class="line"><span class="regexp">            var name = $('#name').val();</span></span><br><span class="line"><span class="regexp">            var phone = $('#phone').val();   </span></span><br><span class="line"><span class="regexp">            $('input').focus(function()&#123;</span></span><br><span class="line"><span class="regexp">              $(this).css('border','');</span></span><br><span class="line"><span class="regexp">            &#125;);</span></span><br><span class="line"><span class="regexp">            if(name == '')&#123;</span></span><br><span class="line"><span class="regexp">              $('#name').css('border','1px solid #ff0000');</span></span><br><span class="line"><span class="regexp">              status = false;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            if(phone == '')&#123;</span></span><br><span class="line"><span class="regexp">              $('#phone').css('border','1px solid #ff0000');</span></span><br><span class="line"><span class="regexp">              status = false;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            if(status)&#123;</span></span><br><span class="line"><span class="regexp">              var data = &#123;</span></span><br><span class="line"><span class="regexp">                'name' : name,</span></span><br><span class="line"><span class="regexp">                'phone':phone,</span></span><br><span class="line"><span class="regexp">                'action': 'query'</span></span><br><span class="line"><span class="regexp">              &#125;</span></span><br><span class="line"><span class="regexp">              sendQuery(data);</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">      &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">    function handleData(response)&#123;</span></span><br><span class="line"><span class="regexp">        var content = '';</span></span><br><span class="line"><span class="regexp">        response.forEach(element =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          var [name, phone, time, item, price,, status] = element.data;</span></span><br><span class="line"><span class="regexp">          var index = element.index;</span></span><br><span class="line"><span class="regexp">          var statusWording = convertStatus(status);</span></span><br><span class="line"><span class="regexp">          content +=</span></span><br><span class="line"><span class="regexp">              `&lt;tr&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;$&#123;name&#125;&lt;/</span>td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;phone&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;$&#123;new Date(time)&#125;&lt;/</span>td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;item&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;$&#123;price&#125;&lt;/</span>td&gt;</span><br><span class="line">                &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">"status"</span>&gt;$&#123;statusWording&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;</span></span><br><span class="line"><span class="regexp">                  $&#123;status !== '' ? '-' :</span></span><br><span class="line"><span class="regexp">                    `&lt;button type="button" onclick="updateStatus('$&#123;name&#125;', '$&#123;phone&#125;', $&#123;index&#125;, this)" class="btn btn-primary"&gt;取消訂單&lt;/</span>button&gt;<span class="string">`</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">                &lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;/tr&gt;`</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (content) &#123;</span><br><span class="line">          <span class="built_in">document</span>.getElementsByClassName(<span class="string">'table-striped'</span>)[<span class="number">0</span>].style.display = <span class="string">'table'</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          alert(<span class="string">'查無資料'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> dataView = <span class="built_in">document</span>.getElementById(<span class="string">'dataView'</span>);</span><br><span class="line">        dataView.innerHTML = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">convertStatus</span>(<span class="params">status</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">''</span>:</span><br><span class="line">            text = <span class="string">'尚未處理'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            text = <span class="string">'訂單已取消'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            text = <span class="string">'訂單處理中'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            text = <span class="string">'完成製作'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            text = <span class="string">'完成交易'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendQuery</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"post"</span>,</span><br><span class="line">        url: <span class="string">"https://script.google.com/macros/s/AKfycbz3fU3FVDmIQehtWX6ecKuV_A67lE64FEQ-ekmOZ_jZDyY96z0/exec"</span>,</span><br><span class="line">        data: data,</span><br><span class="line">        dataType: <span class="string">"JSON"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">          handleData(response);</span><br><span class="line">          $(<span class="string">'#name'</span>).val(<span class="string">''</span>);</span><br><span class="line">          $(<span class="string">'#phone'</span>).val(<span class="string">''</span>); </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateStatus</span>(<span class="params">name, phone, index, that</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> data = &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        phone: phone,</span><br><span class="line">        action: <span class="string">'delete'</span>,</span><br><span class="line">        index: index,</span><br><span class="line">        status: <span class="number">0</span></span><br><span class="line">      &#125;;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"post"</span>,</span><br><span class="line">        url: <span class="string">"https://script.google.com/macros/s/AKfycbz3fU3FVDmIQehtWX6ecKuV_A67lE64FEQ-ekmOZ_jZDyY96z0/exec"</span>,</span><br><span class="line">        data: data,</span><br><span class="line">        dataType: <span class="string">"JSON"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(response === <span class="string">'success'</span>)&#123;</span><br><span class="line">            $(that).parent().siblings(<span class="string">'.status'</span>).text(convertStatus(<span class="number">0</span>));</span><br><span class="line">            $(that).remove();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">'更新失敗！'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://iandays.com/work/friedQuery.html" title="鹹酥雞查詢訂單 範例">鹹酥雞查詢訂單 範例</a></li></ul><p>可以直接右鍵，查看原始碼，直接看我怎麼寫前端畫面的。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>會寫進階查詢的API是因為平常滿多網友有問我，所以乾脆直接寫一篇文章分享。現在工作就沒繼續接觸sheet script API，所以前置花了點時間研究語法，我查詢資料的做法偏向暴力解，拉整包跑迴圈比對，如果有人研究出select query的作法，再麻煩跟我分享一下，感激不盡。</p><p>對了，其實還缺老闆查詢全部資料、更新訂單狀態，這要再加上會員登入權限的api，要擋有權限的帳號才可以查詢全部的資料，這個就讓我富奸一下下次再做吧XD。</p><p>api那段寫得比較快，有問題再麻煩留言，感謝。</p>]]></content>
    
    <summary type="html">
    
      分享如何建立app script api管理讀取、更新excel表單資料，簡單講就是API的CRUD，並且製作一個可以用的簡單畫面，串接api更新訂單狀態。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="google_form" scheme="https://iandays.com/tags/google-form/"/>
    
  </entry>
  
  <entry>
    <title>lazy loading image 延後載入畫面外圖片</title>
    <link href="https://iandays.com/2019/04/25/reactlazyload/"/>
    <id>https://iandays.com/2019/04/25/reactlazyload/</id>
    <published>2019-04-25T15:06:08.000Z</published>
    <updated>2019-06-08T04:42:44.793Z</updated>
    
    <content type="html"><![CDATA[<p>最近身邊朋友問到google speedtest分數優化處理，剛好處理完網頁優化專案，雖然分數尚有進步空間…，lazyload幾乎是網站必備的優化處理，分享一點處理lazyload心得。</p><p><img src="/images/lazyloading.png" alt="lazyloading" title="lazyloading"></p><p>首先拿出一個網站，然後在<a href="https://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener" title="google speedtest">google speedtest</a>輸入送出跑分，如果沒特別處理圖片的話，就會看到精美的項目出現 <code>延後載入畫面外圖片</code>。這代表網站沒有處理延後載入圖片。假設網站有多圖片、或高畫質圖片，那lazyload image是不錯的優化處理。</p><p>lazyload 範例 : <a href="https://unsplash.com/" target="_blank" rel="noopener" title="unsplash">unsplash</a></p><p>上面的unsplash是知名的免費圖庫網站，它就有做了lazyload的處理，你再網頁往下滾過程，會發現區塊先有各種顏色的背景，再開始慢慢載入圖片。</p><h2 id="Google-Guide-Lazyload"><a href="#Google-Guide-Lazyload" class="headerlink" title="Google Guide Lazyload"></a>Google Guide Lazyload</h2><p>google這篇文章，有非常詳盡的教學，告訴你每種處理方法之間的差異。(推薦看完)</p><p>Google website Guide: <a href="https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/" target="_blank" rel="noopener" title="Lazy Loading Images">Lazy Loading Images</a></p><h2 id="實作方法-inline-images"><a href="#實作方法-inline-images" class="headerlink" title="實作方法 inline images"></a>實作方法 inline images</h2><p>這是最常見的處理方法，直接利用javascript搭配viewport判斷，把圖片網址由data-src轉為加入src載入圖片，實際作法分為三種。Intersection observer、event handler、原生chrome支援。</p><ul><li>before<br><code>&lt;img data-src=&quot;https://fakeimg.pl/250x100/&quot; class=&quot;lazyload&quot;&gt;</code></li><li>after<br><code>&lt;img src=&quot;https://fakeimg.pl/250x100/&quot;&gt;</code></li></ul><h3 id="Intersection-observer"><a href="#Intersection-observer" class="headerlink" title="Intersection observer"></a>Intersection observer</h3><p>IntersectionObserver 是新的瀏覽器api，主要處理element 與 viewport之間處理，當目標與element交會則會處理互動，效能相對於傳統做法相對好。</p><p>Google article: <a href="https://developers.google.com/web/updates/2019/02/intersectionobserver-v2" target="_blank" rel="noopener" title="Trust is Good, Observation is Better—Intersection Observer v2">Trust is Good, Observation is Better—Intersection Observer v2</a></p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">var observer = <span class="keyword">new</span> <span class="constructor">IntersectionObserver(<span class="params">callback</span>[, <span class="params">options</span>])</span>;</span><br></pre></td></tr></table></figure><p>上面的參數callback是當viewport與element交會時會觸發，options則是可以使用 <code>root</code>、<code>rootMargin</code>、<code>threshold</code>。</p><p>root可以定義我們判斷這整個viewport的大外層，rootMargin則是可以給予root大外層假想的margin，讓我們可以讓外層viewport提早被觸發，進一步提早callback，threshold則是可以定義出viewport與element之間觸發的比例0~1.0，預設為 0，當我設定 [0, 0.5, 1]，代表他會在三個viewport比例callback。</p><p>IntersectionObserver DOC:<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver/IntersectionObserver" target="_blank" rel="noopener" title="Intersection_Observer_API">MDN Intersection_Observer_API</a></p><p>這方法有非常大的問題，就是不支援全部瀏覽器，ie全部不支援，需要引入IntersectionObserver polyfill處理，或是判斷window API有沒有 IntersectionObserver，沒有就走event handler方法，</p><p>第一個方法缺點就是要載資源，背後實作也是用scroll listener，沒有說你用了polyfill就享有效能好的福利，第二種方法缺點就是要維運兩套lazyload trigger function，對開發來說成本頗高。</p><p>caniuse intersectionObserver : <a href="https://caniuse.com/#feat=intersectionobserver" target="_blank" rel="noopener">悲劇的IE</a> “悲劇的IE”)</p><p>頁面範例: <a href="https://codepen.io/chu1228/pen/QPXLBv?editors=0110" target="_blank" rel="noopener" title="codepen">codepen demo</a></p><h3 id="Event-handler"><a href="#Event-handler" class="headerlink" title="Event handler"></a>Event handler</h3><p>這是最常見的做法，監聽瀏覽器滾動事件，利用getBoundingClientRect().top，來判斷這個element是不是在使用者的視點內，如果在視點內的話，我們就將img src轉變成真正的url，達到延後載入的效果。</p><p>下面的範例是google guide的示範，基本上實作邏輯都差不多，會用到scroll listener，搭配throttle避免scroll過度觸發判斷function，當所有element完成lazyload 移除 Listener，還有監聽resize畫面拉伸、orientationchange倒換畫面。</p><p>頁面範例: <a href="https://codepen.io/chu1228/pen/VNqaNQ" target="_blank" rel="noopener" title="codepen">codepen demo</a></p><h3 id="Chrome-原生支援"><a href="#Chrome-原生支援" class="headerlink" title="Chrome 原生支援"></a>Chrome 原生支援</h3><p>chrome version 75才會release的功能，現在可以先手動開啟設定，chrome網址列輸入<code>chrome://flags/#enable-lazy-image-loading</code>，右邊選項改為enabled。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">loading</span>=<span class="string">'lazy'</span> <span class="attribute">src</span>=<span class="string">'https://placekitten.com/400/400'</span> <span class="attribute">width</span>=<span class="string">'400'</span> <span class="attribute">height</span>=<span class="string">'400'</span> <span class="attribute">alt</span>=<span class="string">''</span>&gt;</span><br></pre></td></tr></table></figure><p>頁面範例: <a href="https://mathiasbynens.be/demo/img-loading-lazy" target="_blank" rel="noopener" title="chrome lazyload demo">chrome lazyload demo</a></p><p>chromestatus: <a href="https://chromestatus.com/feature/5645767347798016" target="_blank" rel="noopener" title="chrome lazyload feature">chrome lazyload feature</a></p><h3 id="lazyload-套件"><a href="#lazyload-套件" class="headerlink" title="lazyload 套件"></a>lazyload 套件</h3><p>隨便搜尋lazyload plugin，就會出現各種lazyload的套件，這邊就不贅述了。如果還是沒方向的話，我目前專案上有用到lazySize，config很多也是不錯用。</p><h2 id="修飾畫面抖動問題"><a href="#修飾畫面抖動問題" class="headerlink" title="修飾畫面抖動問題"></a>修飾畫面抖動問題</h2><p>但你滾動會發現右邊的scroll bar會慢慢長出來，要解決的辦法就是必須模擬圖片高度，撐出lazyload的區塊。保持高度一致不抖動畫面。</p><ul><li>示範圖片<br><img src="/images/rabbit.png" alt="rabbit" title="rabbit"></li></ul><p>上面這張圖片的寬度是2955、高度1516，比例約是 29: 15，我們可以利用圖片比例來產生接近圖片實際大小的灰階區塊。</p><p>接下來使用padding-top來撐出高度，因為我們用的是比例，所以畫面寬度變化，區塊的高度也會隨之變化。直接用上面的IntersectionObserver修改，多做的動作就是img要先填上各自的比例，當載入畫面時填上padding-top，產生區塊的灰色高度。</p><p>ps.codepen的範例有加上setTimeout 500ms，特意讓大家看到lazyload灰階區塊。</p><ul><li>Source code<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lazyImages = [].slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">"img.lazyload"</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"IntersectionObserver"</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lazyImageObserver = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span>(<span class="params">entries, observer</span>) </span>&#123;</span><br><span class="line">      entries.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">entry</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">          <span class="keyword">let</span> lazyImage = entry.target;</span><br><span class="line">          lazyImage.src = lazyImage.dataset.src;</span><br><span class="line">          lazyImage.classList.remove(<span class="string">"lazyload"</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//clear padding-top </span></span><br><span class="line">          lazyImage.style.paddingTop = <span class="string">''</span>;</span><br><span class="line">          lazyImageObserver.unobserve(lazyImage);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    lazyImages.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">lazyImage</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// get image ratio</span></span><br><span class="line">      <span class="keyword">var</span> ratio = lazyImage.dataset.ratio;</span><br><span class="line">      <span class="comment">// create padding-top</span></span><br><span class="line">      lazyImage.style.paddingTop = ratio + <span class="string">'%'</span>;</span><br><span class="line">      lazyImageObserver.observe(lazyImage);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Possibly fall back to a more compatible method here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>頁面範例: <a href="https://codepen.io/chu1228/pen/BEgaKZ?editors=1010" target="_blank" rel="noopener" title="codepen">codepen demo</a></p><p>另外還可以加上onload listener讓載入圖片過程，保持lazyload灰色區塊。</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">lazyImage.src = lazyImage.dataset.src;</span><br><span class="line">lazyImage.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lazyImage.classList.remove(<span class="string">"lazyload"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear padding-top </span></span><br><span class="line">    lazyImage.style.paddingTop = <span class="string">''</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>w3c ration 教學:<a href="https://www.w3schools.com/howto/howto_css_aspect_ratio.asp" target="_blank" rel="noopener" title="Aspect Ratio / Height Equal to Width - W3Schools">Aspect Ratio / Height Equal to Width - W3Schools</a></p><h2 id="產生圖片比例-Ratio"><a href="#產生圖片比例-Ratio" class="headerlink" title="產生圖片比例 Ratio"></a>產生圖片比例 Ratio</h2><p>這在實作上必須倚賴javascript，或後端用其他工具產生，例如說圖片上傳過程後端會另外call api，取得圖片的比例。</p><p>這邊先只討論javascript，利用Image API也可以輕鬆做到，下面的方法就可以拿到圖片的ratio，setRatio則是可以當作儲存圖片的方法，當使用者上傳圖片，會再經過getImageRatio，再帶入save data function 利用callback，當取得圖片比例再提供ratio給後端儲存。</p><p>這方法需要一個前提條件，一種是圖片寬度再container下需要寬滿版，因為padding-top推出來的高度，是相對於container寬度乘出來的。有些人會利用div container img概念處理，只要變化container寬度，一樣可以兼容lazyload，medium就是這樣處理的。</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> get<span class="constructor">ImageRatio(<span class="params">url</span>, <span class="params">callback</span>)</span> &#123;</span><br><span class="line">    var img = <span class="keyword">new</span> <span class="constructor">Image()</span>;</span><br><span class="line">    img.onload = <span class="keyword">function</span><span class="literal">()</span> &#123;</span><br><span class="line">        callback(this.height/this.width<span class="operator"> * </span><span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> set<span class="constructor">Ratio(<span class="params">ratio</span>)</span>&#123;</span><br><span class="line">    console.log(ratio)</span><br><span class="line">&#125;</span><br><span class="line">get<span class="constructor">ImageRatio('<span class="params">https</span>:<span class="operator">/</span><span class="operator">/</span><span class="params">iandays</span>.<span class="params">com</span><span class="operator">/</span><span class="params">images</span><span class="operator">/</span><span class="params">rabbit</span>.<span class="params">png</span>', <span class="params">setRatio</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="seo-額外處理"><a href="#seo-額外處理" class="headerlink" title="seo 額外處理"></a>seo 額外處理</h2><p>雖然googlebot可以執行javascript，但是其他爬蟲不一定可以，所以要特別標明出noscript的img html。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"lazyload"</span> data-ratio=<span class="string">"51.24481327800829"</span> data-src=<span class="string">"https://iandays.com/images/rabbit.png"</span> alt=<span class="string">"rabbit"</span>&gt;</span><br><span class="line">&lt;noscript&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://iandays.com/images/rabbit.png"</span> <span class="attr">alt</span>=<span class="string">"rabbit"</span> /&gt;</span></span>&lt;<span class="regexp">/noscript&gt;</span></span><br></pre></td></tr></table></figure><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>實際上處理lazyload是比較麻煩，要做出lazyload區塊灰階，就需要知道圖片比例。至於如何產生灰階，又分為存資料前預先做好style，或載入頁面再依賴javascript產生。個人較偏向預先做好style，減少使用使用者資源。</p><p>為了優化效能，目前專案部分有使用IntersectionObserver，但要支援萬惡的IE，要再額外載入polyfill，這點目前還在思考最佳解，目前是判斷window不含IntersectionObserver才會執行polyfill。</p><p>結論: lazy loading image 對網站是很合理的處理優化，使用者沒看到的區塊本來就不需要浪費網路載入。</p><p>感謝閱讀，以上有問題歡迎留言，或是傳訊息。</p>]]></content>
    
    <summary type="html">
    
      分享一點最近處理lazyload心得，lazy loading image 對網站是很合理的處理優化，使用者沒看到的區塊本來就不需要浪費網路載入。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="seo" scheme="https://iandays.com/tags/seo/"/>
    
      <category term="frontend" scheme="https://iandays.com/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>聊聊4年前，剛出社會的我</title>
    <link href="https://iandays.com/2019/03/28/society/"/>
    <id>https://iandays.com/2019/03/28/society/</id>
    <published>2019-03-28T14:42:03.000Z</published>
    <updated>2019-06-08T04:44:12.340Z</updated>
    
    <content type="html"><![CDATA[<p>也是很久之前就一直想紀錄的內容，到現在還是很懷念，所以才會開了生活的分類，雖然生活類只有跟工作有關的面試、面試…。</p><p>雖然說時間是4年前，但也算是日記吧。</p><p>主要是記錄我找第一個工作的心情。</p><p><img src="/images/write.png" alt="write" title="write"></p><h2 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h2><p>我是替代役的國防役，九月退伍。記得那時候很認真的準備多益考試，平日有時間就龜在圖書館讀英文，想說多益如果能考個800分，對我面試多少有加分吧。</p><p>雖然當下只想加強英文，但我還真不知道想要做啥工作…，俗話說: 企管系樣樣通，樣樣鬆。外加我大學不學好，問我自己有什麼專業，是沒什麼信心。</p><p>只知道企管系畢業可以做行銷、業務、貿易、金融，其實我是滿沒目標的。</p><p>大學我是選行銷組的，但我對大學課程的行銷學還真沒興趣，覺得教授只是拿經典成功例子出來，看圖說故事 <del>個人心得勿戰</del>。但最後我還是選擇找行銷相關的職缺。</p><h3 id="行銷職"><a href="#行銷職" class="headerlink" title="行銷職"></a>行銷職</h3><p>行銷企劃、行銷公關、網路行銷，我那時候還真的使出海投戰術，打開104 =&gt; 搜尋行銷 =&gt; 有興趣的都投，沒事滑手機就是找工作、投履歷，就是投好投滿，</p><p>一個月半下來，實際面試有5間公司，行銷職的面試都有做簡略簡報，我面試當下其實都滿有信心的，當下信心滿滿，事後都無聲卡…。</p><p>過程中一度懷疑人生，覺得自己是不是哪邊有問題。多益成績剛好出來，很悲劇的只有700…，聽力才280，考場坐第一排回音超大，簡直耳包。雙重打擊啊~</p><p>對了，我那時面試的有APP行銷企劃、貿易行銷業務、遊戲行銷、專利行政、補教業網路行銷。</p><p>APP行銷企劃是要我準備做分析市場社交APP的簡報，我下載各種APP，實際的各種研究，不過面試當天主管不在…，只是員工代替幫我面試，然後聽我簡報分享，當下面試官點點頭，最後只說你有什麼問題嗎，就這樣快速的結束了。</p><p>剩下職缺面試也大同小異，幾乎都是問你:能不能勝任工作內容，我回答可以，然後就結束問我有沒有其他問題，之後無聲卡，各種無法理解問題在哪。</p><h3 id="最後一個"><a href="#最後一個" class="headerlink" title="最後一個"></a>最後一個</h3><p>比較重要是，最後一個面試是補教業行銷。</p><p>是一個年輕主管面試的，頭髮有點捲捲、戴個眼鏡，看起來人和善好溝通，剛好團隊正在建構中，要找網路行銷職務的人。非常仔細、熱情的跟我分享這間公司、部門的未來發展方向，也保證會給這職位很大的發展空間。</p><p>這個面試我有準備簡報，做分析公司產品跟市場定位(SWOT、4P)。當下面試官很認真的聽我講完，然後給我回饋，記得那時候他是說，面試的時候還不夠了解公司，分析很容易不準確、錯誤方向。我其實滿感動的，因為他是第一個面試給我反饋的人。</p><p>一週後，打開手機收到email，標題是恭喜邀約信，終於收到這個錄取通知了，當下還開心的跟女友慶祝XD，真感謝她不停的給我鼓勵。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>剛開始工作，印象最深刻是第一次開會，照慣例，新人都會自我介紹，被經理問到問題: 你未來這一年想學什麼，我就回答: facebook社群經營、photoshop修圖、HTML。沒想到經理回說: 你講這麼多，是代表你沒目標、沒方向，你回去再好好思考，再來說。 我聽了當下只有錯愕、跟 what the…。所以我後面對他印象都不太好。</p><p>在這待了兩年，這兩年，同事從4個人到最後10個人，很幸運的是，遇到了滿多好相處、聰明的同事，這點滿佩服主管的，我覺得他滿會找人才的。</p><p>主管也很願意給你機會、空間發揮。執行長、董事長也會耳提面命，希望員工下班要多多學習。這部分公司文化是真的值得讚美的。</p><p>雖然說公司薪資低了點，但同事間反而有共患難的情感。下班會一起聚餐，甚至會互相討論、分析未來職涯發展，也有資工系跑來做行銷的同事，帶入更多科學的思考，然後一起研究SEO、Google Adword、CSS、JavaScript。甚至最後我也被影響轉換跑道。</p><p>在這邊幾乎都是從0開始，工作時不會太忙，有得時間讓你不停的找東西學、嘗試。</p><p>文長了，有空再分享第一份工作心得吧。</p>]]></content>
    
    <summary type="html">
    
      很久之前就一直想紀錄的內容，到現在還是很懷念。雖然說時間是4年前，但應該也算是日記吧。就從我剛開始退伍到第一個工作。
    
    </summary>
    
      <category term="life" scheme="https://iandays.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript Capture Bubble DOM事件獲取&amp;冒泡</title>
    <link href="https://iandays.com/2019/03/21/eventpass/"/>
    <id>https://iandays.com/2019/03/21/eventpass/</id>
    <published>2019-03-20T19:03:37.000Z</published>
    <updated>2019-06-08T04:41:28.901Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript處理DOM事件上的獲取和冒泡，實務上滿常用到的觀念，可以透過這方式解決一些麻煩問題，例如: popup視窗的關閉、內外層DOM互動關係，另外事件獲取、冒泡也幾乎是面試必考題。</p><p><img src="/images/JavaScript-logo.png" alt="JavaScript logo" title="JavaScript logo"></p><h2 id="DOM一般事件綁定"><a href="#DOM一般事件綁定" class="headerlink" title="DOM一般事件綁定"></a>DOM一般事件綁定</h2><p>下面的例子，我container先綁定click事件，再綁定first，各自彈出自己的id名稱，那哪個會先alert出來。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span>container</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span>ist</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"first"</span>&gt;</span>number 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'container'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">  alert(<span class="keyword">this</span>.id);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'first'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">  alert(<span class="keyword">this</span>.id);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>會是 first 先彈跳出來，因為綁定事件順序並不是代表執行順序，單純只是哪個DOM先綁定事件監聽，實際執行序還是要依照DOM父子關係判定，除非是綁定到同個DOM上，才會依照先後綁定順序執行。</p><iframe src="//codepen.io/chu1228/embed/rRqGga/?height=400&theme-id=0&default-tab=result" width="100%" height="290px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="事件傳遞-Capture-Bubble"><a href="#事件傳遞-Capture-Bubble" class="headerlink" title="事件傳遞 Capture Bubble"></a>事件傳遞 Capture Bubble</h2><p>我們可以在 addEventListener(‘click’,function(){}, <code>true</code>)，來決定useCapture參數的boolean，預設沒帶會是設為false，當usecaptue為true時，事件觸發會先經由DOM tree一路往子層到目標為止，之後再冒泡上去父層，這樣一個完整的流程就是事件獲取與冒泡。</p><p>最重要就是我們有辦法阻止事件獲取冒泡的傳遞，利用event.stopPropagation function，就可以阻止事件往後傳遞。</p><p>另外event還有提供物件eventPhase，會回傳0~4的數值，讓我們可以清楚知道這個事件到什麼階段。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eventPhase:</span> <span class="number">0</span> <span class="string">沒有事件</span></span><br><span class="line"><span class="attr">eventPhase:</span> <span class="number">1</span> <span class="string">獲取階段，會以物件父層一直到最高開始執行，最頂端會是Window，</span></span><br><span class="line">              <span class="string">再來Document，Html，一直到目標為止。</span></span><br><span class="line"><span class="attr">eventPhase:</span> <span class="number">2</span> <span class="string">目標階段，這代表事件執行到目標</span></span><br><span class="line"><span class="attr">eventPhase:</span> <span class="number">3</span> <span class="string">冒泡階段，會由目標物件的第一層父層開始，一路往上到最頂端window為止。</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/EventTarget/addEventListener#%E5%8F%83%E6%95%B8" target="_blank" rel="noopener" title="EventListener usecapture MDN">EventListener usecapture MDN</a></p><p><img src="/images/dompass.png" alt="JavaScript dompass" title="JavaScript dompass"></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// get All elements</span></span><br><span class="line"><span class="keyword">const</span> nodeList= [...document.querySelectorAll(<span class="string">'*'</span>)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// add All elements eventListener</span></span><br><span class="line">nodeList.forEach(<span class="function"><span class="params">elem</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// use true is for capture</span></span><br><span class="line">    elem.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="params">e</span> =&gt;</span> </span><br><span class="line">      alert(<span class="string">`capture <span class="subst">$&#123;elem.tagName&#125;</span> phase:<span class="subst">$&#123;e.eventPhase&#125;</span>`</span>)</span><br><span class="line">    , <span class="literal">true</span> );</span><br><span class="line">    <span class="comment">// default false is for bubble</span></span><br><span class="line">    elem.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="params">e</span> =&gt;</span></span><br><span class="line">      alert(<span class="string">`bubble: <span class="subst">$&#123;elem.tagName&#125;</span> phase:<span class="subst">$&#123;e.eventPhase&#125;</span>`</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><iframe src="//codepen.io/chu1228/embed/EMdwVJ/?height=400&theme-id=0&default-tab=result" width="100%" height="290px" frameborder="0" loading="lazy" allowfullscreen></iframe><p><a href="https://codepen.io/chu1228/pen/EMdwVJ" target="_blank" rel="noopener" title="獲取&amp;冒泡">簡易獲取&amp;冒泡</a></p><p><a href="https://codepen.io/pen/?&editable=true" target="_blank" rel="noopener" title="MDN eventphase flow">MDN eventphase flow</a> (MDN 教學)</p><h2 id="Capture-Bubble-實用範例"><a href="#Capture-Bubble-實用範例" class="headerlink" title="Capture Bubble 實用範例"></a>Capture Bubble 實用範例</h2><p>這邊我們用最經典的popup例子，需求是要點擊按鈕 click 會讓popup顯示的，但在這邊我們希望popup內部點擊不會關閉popup，但是點外部隨便空間會關閉popup。</p><p>首先監聽body點擊會關閉popup，再來監聽openPop按鈕點擊讓popup打開，這邊還多下了 <code>e.stopPropagation()</code>;，防止我點擊 popup 打開觸發body點擊被關閉，因為這樣可以中斷點擊popup往上冒泡觸發body事件。</p><p>再來是popup本身需要能點選內部內容，同樣我們也對 popup 使用 e.stopPropagation(); ，讓我們可以點擊 popup 裡面的內容、按鈕。</p><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"openPop"</span>&gt;</span>open popup<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> // fake wording</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"popup"</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"closePop"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    This is popup</span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert('hello')"</span>&gt;</span>Alert Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">...</span><br><span class="line">const popup =<span class="built_in"> document</span>.getElementById(<span class="string">'popup'</span>);</span><br><span class="line"><span class="keyword">document</span>.getElementById('openPop').addEventListener('click',(e)=&gt;&#123;</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">    popup.classList.add(<span class="string">"active"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">document</span>.body.addEventListener('click',()=&gt;&#123;</span><br><span class="line">    close();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">popup.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">document</span>.getElementById('closePop').addEventListener('click',()=&gt;&#123;</span><br><span class="line">    close();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> close () &#123;</span><br><span class="line">    popup.classList<span class="built_in">.remove</span>(<span class="string">'active'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe src="//codepen.io/chu1228/embed/MxzoZK/?height=400&theme-id=0&default-tab=result" width="100%" height="390px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>這觀念真心覺得實用，很多疑難雜症可以處理，或是可以少綁一些eventlistener，利用父層子層獲取冒泡關係，搭配stopPropagation。</p>]]></content>
    
    <summary type="html">
    
      JavaScript處理DOM事件上的獲取和冒泡，實務上滿常用到的觀念，可以透過這方式解決一些麻煩問題，例如popup視窗的關閉、內外層DOM互動關係，另外事件獲取、冒泡也幾乎是面試必考題。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://iandays.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>SEO關鍵字分析選擇，優化工具介紹</title>
    <link href="https://iandays.com/2019/02/26/keywordselect/"/>
    <id>https://iandays.com/2019/02/26/keywordselect/</id>
    <published>2019-02-26T14:15:08.000Z</published>
    <updated>2019-06-08T04:41:24.005Z</updated>
    
    <content type="html"><![CDATA[<p>從去年剛開始寫blog，就一直很想分享的內容，以前曾擔任過行銷，主要是負責seo優化，有一些些小技巧跟心得想分享。以前是依靠寫文章，並且在文章內導購手法，記得那時候部門內的全部blog、官網我都有負責，到最後整體網站流量都還不錯，官網、blog都成長非常多。</p><p>先不說廢話了，接下來分享如何使用google adword關鍵字分析工具。</p><h2 id="選擇關鍵字方法"><a href="#選擇關鍵字方法" class="headerlink" title="選擇關鍵字方法"></a>選擇關鍵字方法</h2><p>假設你希望網站搜尋流量能成長，我會比較推薦用文章來吸流量，這方法相對容易，寫一篇跟跟你產品有正相關的文章，再引導到購買頁面。</p><p>首先我們要先列出、定義，什麼是我們需要的關鍵字，還有產品調性符合的關鍵字。</p><h3 id="google-adword"><a href="#google-adword" class="headerlink" title="google adword"></a>google adword</h3><p>google關鍵字有個搜尋量預估的工具，可以告訴你每月大概有多少人搜尋這個關鍵字，註冊adword後可以免費使用。</p><p>網址 : <a href="https://goo.gl/3WAtQM" target="_blank" rel="noopener" title="google adword">google adword</a></p><p><img src="/images/keywordtool.png" alt="keyword tool" title="keyword tool"></p><p>點擊關鍵字規劃工具，再點擊<code>尋找新的關鍵字</code>，輸入<code>雨衣</code>關鍵字後，可以看到月搜尋流量，還有更多相關的字詞(僅參考用)。</p><p><img src="/images/keywordtool2.png" alt="keyword tool" title="keyword tool"></p><p>從上表我們可以看出雨衣是一個有搜尋量的關鍵字，還有其他相關字有雨鞋、雨傘、雨具等等，這些都先列出放到旁邊。</p><h3 id="google-search"><a href="#google-search" class="headerlink" title="google search"></a>google search</h3><p>再來我們打開無痕chrome，在google輸入雨衣，再來檢視google search下拉選單的推薦字詞。這邊可以看到有雨衣推薦、雨衣兩件式。這邊出現的字詞，你也可以用adword tool輸入看看月搜尋量。</p><p><img src="/images/search_rain.png" alt="keyword search_rain" title="keyword search_rain"></p><p>google搜尋點擊網站進入，再返回上一頁，網站下方就會出現相關搜尋字詞的清單。</p><p><img src="/images/search_more.png" alt="keyword search_more" title="keyword search_more"></p><p>直接滾到google搜尋底部，會直接列出相關搜尋。<br><img src="/images/search_related.png" alt="keyword search_related" title="keyword search_related"></p><p>這兩邊也可以找到非常多的關鍵字詞。都可以先列起來。再挑出與你產品有相關的關鍵字，組成一篇完整的文章內容。</p><h2 id="規劃內容"><a href="#規劃內容" class="headerlink" title="規劃內容"></a>規劃內容</h2><p>一般來說，會抓1個流量大的關鍵字，後面再一起拉幾個有搜尋量，但競爭不激烈的長尾關鍵字，例如說 <code>一件式雨衣、雨衣推薦、年度字2019、ptt</code>之類的。因為一開始大流量字沒辦法有很好排名，通常都要依賴那些長尾關鍵字撐起流量，慢慢增加整體流量，最後大流量的關鍵字也一起成長排名。</p><p>你整個內容架構，就可以圍繞雨衣一件式或兩件式、材質防水，新年度2019設計的雨衣，或是節錄出ptt網友推薦內容。</p><p>從產品本身敘述到網友口碑推薦，由內往外、起承轉合架構出內容。有個重點就是，千萬不要剪貼簿東貼西貼別人內容，一來侵害著作權、二來搜尋通常不會太好，google很喜歡原創內容。</p><h2 id="標題非常重要"><a href="#標題非常重要" class="headerlink" title="標題非常重要"></a>標題非常重要</h2><p>到現在，title還是非常重要…，所以好好拼湊好一段標題，例如說 <code>一件式雨衣，2019新款雨衣推薦</code>，這種標題雖然看似很芭樂，但是確實還滿有效果的。</p><p>以前我自己推薦這個詞必做，會想辦法生內容，請使用者分享心得，在內容節錄一小段。</p><p>desscription描述要寫的人看得懂的，雖然他對排名沒有正相關，但你好好打，會吸引人搜尋點擊進來，間接影響點擊率、流量，</p><h2 id="完成內容後"><a href="#完成內容後" class="headerlink" title="完成內容後"></a>完成內容後</h2><p>假設你今天內容完成，可以做哪些工作。首先可以發facebook、社群分享、或是email等等，一來透過外部連結讓google能快速索引網站、二來增加網站被分享出去散播，進而增加流量的可能。簡而言之就是建立外部連結，這很難沒錯，可遇不可求。</p><p>我自己心得是，網站的流量與google排名有絕對的正相關，以前會透過經營ptt，分享知識型內容，導入流量，但這塊流量非常無感，排名幾乎不會變動。反倒是facebook流量幫助非常大，雖然link是nofollow的，通常一天導入5000流量後，排名會突然衝到第一頁，但這方法已經沒用了，後期一樣操作手法完全沒幫助排名了。</p><h2 id="持續修改優化"><a href="#持續修改優化" class="headerlink" title="持續修改優化"></a>持續修改優化</h2><p>我從以前就很討厭<code>優化</code>這個詞，應該叫做隨時準備調整內容、標題方向，當你今天建立好內容後，你應該要利用search console，持續觀察排名變化，還有透過ga了解這個網址，被訪問的流量結構，搜尋流量最珍貴，再來是推薦流量，直接流量次之(以上純個人看法)。</p><p>過了一個月之後，成效還是非常差，這時候你要考慮改變方向，找其他競爭較小比較少人做的關鍵字，修改增減內容。</p><p>但如果很幸運的，排名不斷的進步，你要知道是哪些關鍵字，或那部份的流量幫助成長，你就要小心修改內容去刪減到那部份的關鍵字，保持原本好的部分，刪減你現在沒做到的關鍵字的部分。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>自己覺得剛開始做seo，要成長流量很好做，因為從0開始，你隨便都能成長流量，但當你流量到一個程度後，要進一步成長，會變得很困難，你可以會挑戰業界最大量的關鍵字，例如 <code>日本旅遊</code>，那你要規劃得不再只是一頁內容，而是整體網站的串連操作。</p><p>當你做到了，但要保持排名又是另一個學問了…。</p><p>最後，以上都是我非常主觀的個人心得，警示一下有可能過舊沒用。如果有哪些錯誤，再麻煩提醒了。</p>]]></content>
    
    <summary type="html">
    
      從去年剛開始，就一直很想分享的內容，以前曾擔任過行銷，主要是負責seo優化，有一些些小技巧跟心得想分享。接下來分享如何使用google adword關鍵字分析工具等等，規劃架構出內容，幫助提升排名。
    
    </summary>
    
      <category term="marketing" scheme="https://iandays.com/categories/marketing/"/>
    
    
      <category term="seo" scheme="https://iandays.com/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Promise example 簡易實作模擬</title>
    <link href="https://iandays.com/2019/02/18/promise/"/>
    <id>https://iandays.com/2019/02/18/promise/</id>
    <published>2019-02-18T14:58:16.000Z</published>
    <updated>2019-06-08T04:42:17.005Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript 在ES6新增了大量非常實用的功能，其中重要一項就是Promsie，讓我們可以很直覺的處理非同步，在以前如果我們需要同時發出多個非同步請求，就必須在每次調用function 時，一起在參數帶回callback的function，重複了幾次就變成了波動拳。</p><p>接下來會用 promise 處理 callback hell，還有建立一個簡易的 promise，幫助我們理解promise。</p><p><img src="/images/callbackhell.png" alt="javascript callback hell" title="javascript callback hell"></p><h2 id="簡易的-Promise"><a href="#簡易的-Promise" class="headerlink" title="簡易的 Promise"></a>簡易的 Promise</h2><p>複雜專案可能會出現的波動拳，這畫面我真實有看過…，假設換成用promise的話，就可以很輕鬆直覺處理掉，首先我們先建立一個簡單的ajax function sample code，下面會用es6來寫，希望能在整個流程中，讓你了解es6的方便。</p><p>宣告一個getData arrow function，裡面包含XMLHttpRequest，我們監聽onreadystatechange，當整個成功取得資料，就調用resolve來進行callback把資料放進resolve function傳遞，當取得資料失敗就調用reject function來傳遞資料。</p><p>當我們new一個promise的同時，我們callback function 是帶入 function(resolve, reject){resolve or reject}，讓內部promise function被我們用resolve或是reject調用。</p><ul><li>promise 三種狀態<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">擱置（pending）：初始狀態，不是 fulfilled 與 rejected。</span><br><span class="line">實現（fulfilled）：表示操作成功地完成。</span><br><span class="line">拒絕（rejected）：表示操作失敗了。</span><br></pre></td></tr></table></figure></li></ul><p>promise 會等待佇列 pending狀態，等到被resolve觸發fulfilled，就會開始回調then，或是被reject觸發catch。</p><p>then 以及 catch 都會回傳一個promise，也就是說可以<code>.then(()=&gt;{}).then(()=&gt;{}).then(()=&gt;{})</code>除非有錯誤產生，否則會往下調用下去。<code>.catch(()=&gt;{}).catch(()=&gt;{}).catch(()=&gt;{})</code>則是當javascript有錯誤發生，會開始向下catch，直到沒錯誤為止才會調用catch function，同時因為沒錯誤所以會停住。</p><ul><li>非同步function 範例<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// declare arrow function return Promise</span></span><br><span class="line"><span class="comment">// ** new Promise to inherit Promise instance **</span></span><br><span class="line"><span class="keyword">const</span> getData = <span class="function">(<span class="params">url</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// create http request</span></span><br><span class="line">  <span class="keyword">const</span> xhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhttp.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhttp.readyState)</span><br><span class="line">    <span class="keyword">if</span> (xhttp.readyState === <span class="number">4</span> ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhttp.status === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// resolve will trigger Promise then callback</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhttp.response));</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(xhttp.response));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// reject will trigger Promise catch callback</span></span><br><span class="line">        reject(xhttp.statusText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhttp.open(<span class="string">"GET"</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhttp.send();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">getData(<span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// destructuring object</span></span><br><span class="line">    <span class="keyword">const</span> &#123; id, title, completed &#125; = res; </span><br><span class="line">    <span class="keyword">const</span> html = <span class="string">`&lt;div class="item"&gt;</span></span><br><span class="line"><span class="string">                    &lt;p&gt;Id: <span class="subst">$&#123;id&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;Title: <span class="subst">$&#123;title&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;Completed: <span class="subst">$&#123;completed&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">                  &lt;/div&gt;`</span>;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);      </span><br><span class="line">    newNode.innerHTML = html;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#list'</span>).appendChild(newNode);</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// it will run when promise Reject or </span></span><br><span class="line">  <span class="comment">// in then function appear javascript error</span></span><br><span class="line">  .catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    alert(<span class="string">`Something Error ,because <span class="subst">$&#123;res&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><iframe src="//codepen.io/chu1228/embed/yZrVKW/?height=400&theme-id=0&default-tab=js,result" width="100%" height="400px" frameborder="0" loading="lazy" allowfullscreen></iframe></li></ul><p><a href="https://codepen.io/chu1228/pen/yZrVKW?editors=1111" target="_blank" rel="noopener" title="codepen promise demo">codepen promise demo</a></p><h2 id="Promise-解決-callback-hell"><a href="#Promise-解決-callback-hell" class="headerlink" title="Promise 解決 callback hell"></a>Promise 解決 callback hell</h2><p>那如果我們要繼續拉第二筆資料 /todos/2，這時候就能展現promise方便了，當拉完資料後，再回傳一個promise，再用then catch去接受回傳值，反覆下去延伸。</p><p>這樣的寫法優點是比起以往依賴callback更直覺，另外每次都分同步取資料都可能會失敗。也很容易針對每個段點做不同的錯誤處理。</p><ul><li>add more callback<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">getData(<span class="string">'https://jsonplaceholder.typicode.com/todos/1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    appendItem(res);</span><br><span class="line">    <span class="comment">// return getData promise</span></span><br><span class="line">    <span class="keyword">return</span> getData(<span class="string">'https://jsonplaceholder.typicode.com/todos/2'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'top'</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// it will start next promise then catch</span></span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    appendItem(res);</span><br><span class="line">    <span class="keyword">return</span> getData(<span class="string">'https://jsonplaceholder.typicode.com/todos/3'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  ).catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'middle'</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    appendItem(res);</span><br><span class="line">    &#125;</span><br><span class="line">  ).catch(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bottom'</span>, res);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// append html function</span></span><br><span class="line"><span class="keyword">const</span> appendItem = <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// prevent get null or undefined trigger .catch</span></span><br><span class="line">    <span class="keyword">if</span> (!res) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, title, completed &#125; = res;</span><br><span class="line">    <span class="keyword">const</span> html = <span class="string">`&lt;div class="item"&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;Id: <span class="subst">$&#123;id&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;Title: <span class="subst">$&#123;title&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;Completed: <span class="subst">$&#123;completed&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">                  &lt;/div&gt;`</span>;</span><br><span class="line">    <span class="keyword">const</span> newNode = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);      </span><br><span class="line">    newNode.innerHTML = html;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#list'</span>).appendChild(newNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><iframe src="//codepen.io/chu1228/embed/yZrMRE/?height=409&theme-id=0&default-tab=js,result,result" width="100%" height="410px" frameborder="0" loading="lazy" allowfullscreen></iframe><p><a href="https://codepen.io/chu1228/pen/yZrMRE?editors=1111" target="_blank" rel="noopener" title="codepen promise demo">codepen promise demo</a></p><h2 id="實現-promise"><a href="#實現-promise" class="headerlink" title="實現 promise"></a>實現 promise</h2><p>promise就像是個魔術，直到es6以前都很難處理好分同步處理，我們來試著做一個只單純帶有then catch簡易的promise，來幫助我們更了解promise。</p><p>先來解讀一下promise，他是依賴resolve、reject function調用的，直接 <code>new Promise(()=&gt;{})</code>，可以看到promise內部的狀態，有status、value、then、catch、finally，這邊就先不理會finally。</p><ul><li>Promise native prototype<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Promise &#123;&lt;pending&gt;&#125;</span><br><span class="line">  __proto__: Promise</span><br><span class="line">  catch: ƒ catch()</span><br><span class="line">  constructor: ƒ Promise()</span><br><span class="line">  finally: ƒ finally()</span><br><span class="line">  <span class="keyword">then</span>: ƒ <span class="keyword">then</span>()</span><br><span class="line">  Symbol(Symbol.toStringTag): <span class="string">"Promise"</span></span><br><span class="line">  __proto__: Object</span><br><span class="line">  <span class="string">[[PromiseStatus]]</span>: <span class="string">"pending"</span></span><br><span class="line">  <span class="string">[[PromiseValue]]</span>: undefined</span><br></pre></td></tr></table></figure></li></ul><p>首先先用es6 class 建立一個 promise，依照promise內部code，我們也建立內部的變數 status 以及 value，status是讓我們判斷pending 或是fullfill reject狀態，value則是用來接帶進來的值。</p><p>這邊比較容易看不懂的是 constructor(callback)，這個callback指的是 new Promise( <code>(res,rej)=&gt;{ res(&#39;Hello&#39;)}</code> )，簡單講就是你帶進來的function。我們在使用promise會用到兩個function，reslove以及reject，我們也依樣畫葫蘆，依樣命名一個resolve、reject，依照(resolve,reject)順序帶入callback，帶進來讓使用者可以調用到。當我們在外部使用第一個function，就會調用到內部的reslove，如果是第二個的話則是調用到內部的reject。</p><p>距離實際的promise還缺少了then、catch，接下來再繼續實作。</p><ul><li><p>build promise</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(callback)&#123;</span><br><span class="line">    <span class="comment">// promise status</span></span><br><span class="line">    <span class="keyword">this</span>.status = <span class="string">'pending'</span>;</span><br><span class="line">    <span class="comment">// create variable to store resolve or reject value</span></span><br><span class="line">    <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="comment">// resolve is not outside resolve </span></span><br><span class="line">    <span class="comment">// it is use to pass callback function first function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = res =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'fullfilled'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = res;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reject is not outside reject </span></span><br><span class="line">    <span class="comment">// it is use to pass callback function second function</span></span><br><span class="line">    <span class="keyword">const</span> reject = res =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status !== <span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'rejected'</span>;</span><br><span class="line">        <span class="keyword">this</span>.value = res;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// it's keypoint to call reslove or reject function</span></span><br><span class="line">    <span class="comment">// reslove or reject just assign status and value</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// this resolve is upper resolve function</span></span><br><span class="line">      callback(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加上then catch 接受回傳值</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="comment">// then will let user call to check status</span></span><br><span class="line">  then = (success, failed) =&gt; &#123;</span><br><span class="line">      console.log(`then`)</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> success(<span class="keyword">this</span>.value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.status === <span class="string">'rejected'</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> failed(<span class="keyword">this</span>.value);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// it will call then function and callback second callback function</span></span><br><span class="line">  <span class="keyword">catch</span> = cb =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.then(<span class="literal">null</span>,cb);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://codepen.io/chu1228/pen/pGmLez?editors=0011" target="_blank" rel="noopener" title="codepen promise build">codepen promise build</a></p><p>到這裡只是很簡單的promise大致上執行邏輯而已，方便我們更好理解promise原理，要完整實現還有很多細節要處理，例如說要then 或是 catch 要return promise，還有all race finally沒有寫上去。你可以看一下更多完整功能要怎實現出來。</p><p><a href="https://gist.github.com/vkarpov15/169d61f210c3420accf96f2081ad716d" target="_blank" rel="noopener" title="vkarpov15/promise.js">vkarpov15/promise.js</a></p><p>雖然每次用promise都很理所當然，規則已經既定是如此，但如果每次使用都能了解背後原理，能夠以不同角度來看待，我自己覺得對我來說，幫助都很大，最近正在無盡的的優化網頁效能，無限感慨中…。</p><p>如果有錯誤歡迎留言，感謝閱讀。</p>]]></content>
    
    <summary type="html">
    
      接下來會用 promise 處理 callback hell，還有建立一個簡易的 promise，幫助我們理解promise。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://iandays.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React Server-side rendering SEO處理</title>
    <link href="https://iandays.com/2019/01/30/reactssr/"/>
    <id>https://iandays.com/2019/01/30/reactssr/</id>
    <published>2019-01-29T16:39:25.000Z</published>
    <updated>2019-06-08T04:43:46.346Z</updated>
    
    <content type="html"><![CDATA[<p>先來稍微介紹一下為什麼要做server side render，另外這邊不會使用next.js，雖然公司目前專案有用到，但我滿推薦用next.js的，很好導入並且解決很多需要處理的問題。(雖然有一些bug、還會頻繁更新，兩年內version 3 -&gt; 7…)</p><p><img src="/images/react.png" alt="react lifecycle" title="react lifecycle"></p><h2 id="Server-side-rendering-SEO"><a href="#Server-side-rendering-SEO" class="headerlink" title="Server-side rendering SEO"></a>Server-side rendering SEO</h2><p>傳統網站內容是依靠後端php、jsp等產生html內容，稱之為Server-side rendering，但隨著前端技術演進，所有動態內容不再是連接資料庫取資料，轉變為使用非同步請求，依照不同需要依靠JavaScript直接請求API，然後更新需要改動的html，雖然說這樣處理很方便，使用者不用換網址發請求，整個畫面重新閃動。</p><p>但這方法背後也產生SEO的缺點，動態內容的核心是執行JavaScript，而網頁爬蟲卻不一定會載入執行網頁上的JavaScript，雖然google官方表示爬蟲會<code>盡可能</code>的執行script，但實務上當你要優化SEO，就可能會避免用非同步拉資料，或是處理其他細節。這方式又稱為Client-side rendering。</p><p>PS.google官方表示爬蟲邏輯大概是 索引 -&gt; (有資源後) -&gt; 執行 JavaScript，核心價值在於URL，不同內容必須要有對應的URL，才有可能幫你每個分頁分開索引。</p><p>影片推薦觀看，能更了解JavaScript與爬蟲之間關係。<br><a href="https://www.youtube.com/watch?v=PFwUbgvpdaQ" target="_blank" rel="noopener" title="Google I/O &#39;18 javascript website">Google I/O ‘18 javascript website</a></p><h2 id="React-server-side-render"><a href="#React-server-side-render" class="headerlink" title="React server-side render"></a>React server-side render</h2><p>使用React框架，但又需要讓爬蟲能索引得到html，就需要轉為使用server-side render，核心概念就是，原本JavaScript是用戶端執行產生內容，轉向依靠server來產生內容，請求API的部分也交由server端處理，直接在server端拿到畫面相關的資料，這樣爬蟲來索引的同時，就已經拿到了內容了。</p><p>接下來來試著架構出React server-side render的架構，會使用到react官方的cli create-react-app，以及node.js作為server。</p><h3 id="使用-create-react-app-cli"><a href="#使用-create-react-app-cli" class="headerlink" title="使用 create-react-app cli"></a>使用 create-react-app cli</h3><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">npx </span><span class="built_in">create-react-app</span> <span class="string">react-ssr</span></span><br><span class="line"><span class="string">cd </span><span class="string">react-ssr</span></span><br></pre></td></tr></table></figure><h3 id="安裝使用-express"><a href="#安裝使用-express" class="headerlink" title="安裝使用 express"></a>安裝使用 express</h3><p>server side render 需要後端執行javascript，因此這邊使用node來處理，npm i express，再來建立server folder，在建立一個index.js，作為我們server執行的root。</p><ul><li>src</li><li>server<ul><li>index.js</li></ul></li></ul><p>純粹只是client side render，就只要執行 npm run build，再來我們針對build出來的資源，用express來控制。</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = require(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> path = require(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// host build foler resource</span></span><br><span class="line">app.use(express.<span class="keyword">static</span>(path.<span class="keyword">join</span>(__dirname, <span class="string">'../build'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// settting router</span></span><br><span class="line">app.<span class="keyword">get</span>(<span class="string">'*'</span>, (req,res) =&gt;&#123;</span><br><span class="line">    res.sendFile(path.<span class="keyword">join</span>(__dirname+<span class="string">'../build/index.html'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/csr.png" alt="react csr" title="react csr"></p><h2 id="express-render-REACT"><a href="#express-render-REACT" class="headerlink" title="express render REACT"></a>express render REACT</h2><p>先談談用node 執行javascript會遇到哪些難解問題。</p><ul><li><p>首先node 無法執行 import。<br>依靠 @babel/register 搭配 @babel/plugin-syntax-dynamic-import、@babel-plugin-dynamic-import-node，讓express執行轉譯過的i<br>mport。</p></li><li><p>node 無法讀取 css、image 會出現 object<br>利用style-ignore，避開執行css內容，並在這邊處理好image hash name。</p></li><li><p>render react<br>透過react-dom/server 的 renderToString 或 renderToStaticMarkup 執行react。</p></li></ul><p>剩下react-router、redux、檔案加入hash name、hot reload等等，就先不在這邊討論。<br>(置底medium文章有用到 redux、react-router)</p><h2 id="建立-server-js、render-js"><a href="#建立-server-js、render-js" class="headerlink" title="建立 server.js、render.js"></a>建立 server.js、render.js</h2><p>再建立 server.js loader.js兩個檔案，<code>server.js</code> 主要負責 express，<code>index.js</code>則是處理server 設定 babel、各種預處理修正，<code>render.js</code> 負責 render 內容。</p><h2 id="index-js-功能"><a href="#index-js-功能" class="headerlink" title="index.js 功能"></a>index.js 功能</h2><p>md5File 是為了讀取image file name，搭配ignoreStyles使用，讓server讀取到 npm build出來的file name。這邊最黑魔法的是babel/register，也是第一次看過這個用法，很輕鬆不需要eject就導入babel到create react app內。</p><p><code>npm install md5-file ignore-styles</code></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> md5File = <span class="built_in">require</span>(<span class="string">'md5-file'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ignoreStyles = <span class="built_in">require</span>(<span class="string">'ignore-styles'</span>);</span><br><span class="line"><span class="keyword">const</span> register = ignoreStyles.default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> extensions = [<span class="string">'.gif'</span>, <span class="string">'.jpeg'</span>, <span class="string">'.jpg'</span>, <span class="string">'.png'</span>, <span class="string">'.svg'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ignore image and style request</span></span><br><span class="line">register(ignoreStyles.DEFAULT_EXTENSIONS, <span class="function">(<span class="params"><span class="built_in">module</span>, filename</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!extensions.find(<span class="function"><span class="params">f</span> =&gt;</span> filename.endsWith(f))) &#123;</span><br><span class="line">    <span class="comment">// use for style</span></span><br><span class="line">    <span class="keyword">return</span> ignoreStyles.noOp();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// use for image and add hash follow react cli </span></span><br><span class="line">    <span class="keyword">const</span> hash = md5File.sync(filename).slice(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">const</span> bn = path.basename(filename).replace(<span class="regexp">/(\.\w&#123;3&#125;)$/</span>, <span class="string">`.<span class="subst">$&#123;hash&#125;</span>$1`</span>);</span><br><span class="line">    <span class="built_in">module</span>.exports = <span class="string">`/static/media/<span class="subst">$&#123;bn&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'@babel/polyfill'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'@babel/register'</span>)(&#123;</span><br><span class="line">  ignore: [<span class="regexp">/\/(build|node_modules)\//</span>],</span><br><span class="line">  presets: [<span class="string">'@babel/preset-env'</span>, <span class="string">'@babel/preset-react'</span>],</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'@babel/plugin-syntax-dynamic-import'</span>,</span><br><span class="line">    <span class="string">'dynamic-import-node'</span>,</span><br><span class="line">    <span class="string">'react-loadable/babel'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// it will run express</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./server'</span>);</span><br></pre></td></tr></table></figure><h2 id="server-js-功能"><a href="#server-js-功能" class="headerlink" title="server.js 功能"></a>server.js 功能</h2><p>這邊主要就是處理express 路由，static file路徑，非常簡單的基本設定，比較特別的是用到Loadable 來確保有render component有執行完成。</p><p><code>npm install react-loadable express</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">'react-loadable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> render <span class="keyword">from</span> <span class="string">'./render'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">4000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(express.Router().get(<span class="string">'/'</span>, render));</span><br><span class="line">app.use(express.static(path.resolve(__dirname, <span class="string">'../build'</span>)));</span><br><span class="line">app.use(render);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Loadable listener to make sure that all of your loadable components are already loaded</span></span><br><span class="line"><span class="comment">// https://github.com/jamiebuilds/react-loadable#preloading-all-your-loadable-components-on-the-server</span></span><br><span class="line">Loadable.preloadAll().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  app.listen(PORT, <span class="built_in">console</span>.log(<span class="string">`App listening on port <span class="subst">$&#123;PORT&#125;</span>!`</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="render-js-功能"><a href="#render-js-功能" class="headerlink" title="render.js 功能"></a>render.js 功能</h2><p>這邊就是實際render react，主要依賴renderToString來取得react執行後的html，之後再將react的html組裝成完整頁面的資料。</p><p>這邊我有傳遞資料給App wording，假設直接看 view-source:<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 會看到 THIS IS Server Side Render ，但是client side init會瞬間不見，這邊可以讓你做一些call api後的資料傳遞，但這邊要記得要設定成某個變數名，讓client抓取這個變數。</p><p>ps.client指的是使用者載入時。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">'react-dom/server'</span>;</span><br><span class="line"><span class="keyword">import</span> Helmet <span class="keyword">from</span> <span class="string">'react-helmet'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'../src/app'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (req, res) =&gt; &#123;</span><br><span class="line">    fs.readFile(path.resolve(__dirname, <span class="string">'../build/index.html'</span>), <span class="string">'utf8'</span>, <span class="function">(<span class="params">err, htmlData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">`Error page <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">return</span> res.status(<span class="number">404</span>).end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> helmet = Helmet.renderStatic();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> html = injectHTML(htmlData, &#123;</span><br><span class="line">            html: helmet.htmlAttributes.toString(),</span><br><span class="line">            title: helmet.title.toString(),</span><br><span class="line">            meta: helmet.meta.toString(),</span><br><span class="line">            body: renderToString(&lt;App wording=<span class="string">"THIS IS Server Side Render"</span>/&gt;)</span><br><span class="line">        &#125;);</span><br><span class="line">        res.send(html);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> injectHTML = <span class="function">(<span class="params">data, &#123; html, title, meta, body, state &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    data = data.replace(<span class="string">'&lt;html&gt;'</span>, <span class="string">`&lt;html <span class="subst">$&#123;html&#125;</span>&gt;`</span>);</span><br><span class="line">    data = data.replace(<span class="regexp">/&lt;title&gt;.*?&lt;\/title&gt;/g</span>, title);</span><br><span class="line">    data = data.replace(<span class="string">'&lt;/head&gt;'</span>, <span class="string">`<span class="subst">$&#123;meta&#125;</span>&lt;/head&gt;`</span>);</span><br><span class="line">    data = data.replace(</span><br><span class="line">        <span class="string">'&lt;div id="root"&gt;&lt;/div&gt;'</span>,</span><br><span class="line">        <span class="string">`&lt;div id="root"&gt;<span class="subst">$&#123;body&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>package.json<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"@babel/core"</span>: <span class="string">"^7.1.2"</span>,</span><br><span class="line">  <span class="string">"@babel/plugin-syntax-dynamic-import"</span>: <span class="string">"^7.0.0"</span>,</span><br><span class="line">  <span class="string">"@babel/polyfill"</span>: <span class="string">"^7.0.0"</span>,</span><br><span class="line">  <span class="string">"@babel/register"</span>: <span class="string">"^7.0.0"</span>,</span><br><span class="line">  <span class="string">"babel-plugin-dynamic-import-node"</span>: <span class="string">"^2.1.0"</span>,</span><br><span class="line">  <span class="string">"ignore-styles"</span>: <span class="string">"^5.0.1"</span>,</span><br><span class="line">  <span class="string">"md5-file"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">  <span class="string">"react-frontload"</span>: <span class="string">"^1.0.3"</span>,</span><br><span class="line">  <span class="string">"react-helmet"</span>: <span class="string">"^5.2.0"</span>,</span><br><span class="line">  <span class="string">"react-loadable"</span>: <span class="string">"^5.5.0"</span>,</span><br><span class="line">  <span class="string">"react"</span>: <span class="string">"^16.7.0"</span>,</span><br><span class="line">  <span class="string">"react-dom"</span>: <span class="string">"^16.7.0"</span>,</span><br><span class="line">  <span class="string">"react-scripts"</span>: <span class="string">"2.1.3"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">  <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span>,</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"NODE_ENV=development node ./server/index.js"</span>,</span><br><span class="line">  <span class="string">"prod"</span>: <span class="string">"NODE_ENV=production node ./server/index.js"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://github.com/Ianpig/react-sample-ssr" target="_blank" rel="noopener" title="Source Code Github">Source Code Github</a></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>整個寫完只需要三個檔案，看似簡單，但其實還有非常多部分還未處理，例如router，要能夠在server處理各種路徑render。開發時需要hot reload，否則每次更新都要 build。這邊有看到有人有使用nodeman處理。各種檔案資源的壓縮優化，這就要依靠webpack。</p><p>以上問題 next.js 都有提供方法處理，官方還有各種工具整合的sample code，雖然我自己不太愛next.js，但它真的解決不少問題。(但是safari back存在各種bug…)</p><p>如果有錯誤的地方，還麻煩提出，感謝閱讀。</p><ul><li><a href="https://medium.com/@cereallarceny/server-side-rendering-in-create-react-app-with-all-the-goodies-without-ejecting-4c889d7db25e" target="_blank" rel="noopener" title="參考資料 medium cereallarceny">參考資料 medium cereallarceny</a></li></ul>]]></content>
    
    <summary type="html">
    
      不使用next.js，來試著依靠原生方法，架構出React server-side render，會使用到react官方的cli create-react-app，以及node.js作為server。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="seo" scheme="https://iandays.com/tags/seo/"/>
    
      <category term="react.js" scheme="https://iandays.com/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>SEO 301、302轉址Redirect，canonical tag重複內容處理</title>
    <link href="https://iandays.com/2018/12/19/seoredirect/"/>
    <id>https://iandays.com/2018/12/19/seoredirect/</id>
    <published>2018-12-19T15:14:11.000Z</published>
    <updated>2019-06-08T04:44:03.023Z</updated>
    
    <content type="html"><![CDATA[<p>SEO優化，是眾多細節的組成的，不光光只是設定好title而已，還有網站架構、速度、後端設定處理等等，包含非常多項目，對開發人員來說，不論是設計、前端、後端都需要注意。</p><p><img src="/images/google_search.png" alt="google search" title="google search"></p><p>假設一個網站改版更新，大概會有幾個需求，前端畫面修改、網址架構更新、增加欄位修改api等等。</p><p>前端需要注意畫面更新方式，如果是不變化網址(SPA)，內容是經由互動產生內容，那互動產生內容同時，就要有對應的網址參數(window.history.pushState)，然後這些網址要能夠請求拿到各自對應的內容。每個對應的網址參數在列在sitemap上，讓google有辦法索引。</p><h2 id="rediect轉址介紹"><a href="#rediect轉址介紹" class="headerlink" title="rediect轉址介紹"></a>rediect轉址介紹</h2><p>更換網址架構的話，假設你有個賣蘋果的頁面網址是 domain/product/apple，在google搜尋上 <code>網購蘋果</code> 是第一名，但如果改版後網址要變成 domain/product/freshapple，有個重點非常重要，千萬要記得做轉址。否則product/apple <code>網購蘋果</code> 的排名就會歸零。</p><p>白話來說，轉址的概念大概是宣告這個頁面要搬家到另一個頁面的意思，也可以跨domain轉。</p><h2 id="轉址方法"><a href="#轉址方法" class="headerlink" title="轉址方法"></a>轉址方法</h2><p>依照不同後端語言，各有不同的轉址寫法，但邏輯上都是一樣的，大概分為 301、302、307。</p><h3 id="rediect轉址狀態碼"><a href="#rediect轉址狀態碼" class="headerlink" title="rediect轉址狀態碼"></a>rediect轉址狀態碼</h3><ul><li>301 狀態碼表示網頁已永久遷移至新的位置</li><li>302 狀態瑪表示網頁暫時導向新位置</li><li>307 狀態瑪表示暫時導向新位置，但是保持使用者請求方式不變</li></ul><p>Node.js express 301語法</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">res</span><span class="selector-class">.redirect</span>(<span class="number">301</span>, <span class="string">'http://example.com'</span>);</span><br></pre></td></tr></table></figure><p><a href="https://support.google.com/webmasters/answer/93633?hl=zh-Hant" target="_blank" rel="noopener" title="google 301 rediect 介紹">google 301 rediect 介紹</a></p><h2 id="哪些網址需要做redirect"><a href="#哪些網址需要做redirect" class="headerlink" title="哪些網址需要做redirect"></a>哪些網址需要做redirect</h2><p><a href="http://www.domain.com" target="_blank" rel="noopener">www.domain.com</a> 跟 domain.com 就會被google是為兩個網站，這時候你可以用301轉址處理，避免網站同時存在各種url顯示相同網址。<br>(domain網站就有做 domain.com redirect to <a href="http://www.domain.com" target="_blank" rel="noopener">www.domain.com</a>)</p><p>網站同時存在 https:// http:// 兩種可以被訪問，也需要做轉址，假設網址結尾帶有或是無 .php .jsp，也需要指定一個做 301redirect。</p><p>需不需要轉址核心概念就是，這個頁面的內容，只有一個網址可以顯示。</p><p>但是如果今天網址需要帶參數怎辦(utm、gdn)? 這時候就需要canonical tag。(後半段介紹)</p><h2 id="轉址缺點、後遺症"><a href="#轉址缺點、後遺症" class="headerlink" title="轉址缺點、後遺症"></a>轉址缺點、後遺症</h2><p>三年前工作經驗，使用301轉址，新網址的關鍵字排名<code>一定</code>會掉落排名，大概過了一兩週後才會慢慢回升，我會用一定是因為john muller(google webmaster發言人)也確實發表過掉落些許排名這件事情。</p><p>但2016年時 google’s Gary Illyes 表示 30x不在會掉落PageRank。在今年，我的blog有做過301轉址，大概一兩天之後，在搜尋結果上，新網址會取代舊網址，排名完全沒有變動。</p><iframe border=0 frameborder=0 height=200 width=550  src="https://twitframe.com/show?url=https://twitter.com/methode/status/757923179641839616?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E757923179641839616&ref_url=https%3A%2F%2Fmoz.com%2Fblog%2F301-redirection-rules-for-seo"></iframe><h2 id="canonical-介紹"><a href="#canonical-介紹" class="headerlink" title="canonical 介紹"></a>canonical 介紹</h2><p>如果你網站沒辦法經由301處理，讓同個頁面有多個網址可以載入取得，或是有重複性內容處理的問題，那你就需要使用canonical處理，你可以用html的link處理。指定目前網址的搜尋權重指派到哪個網址。或是在server response header加上 rel=canonical。</p><p>另外sitemap也可以指定索引的網址，但效力會被canonical 蓋過。</p><ul><li><p>網址為 <a href="https://example.com/apple?user=ianchuu" target="_blank" rel="noopener">https://example.com/apple?user=ianchuu</a></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"canonical"</span> <span class="attribute">href</span>=<span class="string">"https://example.com/apple"</span> /&gt;</span><br></pre></td></tr></table></figure></li><li><p>google 重複性內容處理</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">如果您有某一個網頁可透過多個網址存取，或是不同網頁上存在相似的內容 <span class="comment">(例如同時有行動版和桌面版網頁)</span>，Google 會將這些網頁視為相同網頁的重複版本，從中選出一個網址做為「標準」版本並檢索該網址，其他網址則會被視為「重複」網址，檢索頻率會比較低。</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://support.google.com/webmasters/answer/139066?visit_id=636808323796527838-1214345128&rd=1" target="_blank" rel="noopener" title="google 整合重複的網址">google 整合重複的網址</a></p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這邊大部分觀念都圍繞在更換網址、處理重複性內容。</p><p>一般網站很高機會遇到重複性內容的問題，因為前端或是後端需要網址參數來變化內容，記得，如果網址有帶參數，但是有沒有帶網頁內容都一樣，就記得加上canonical，直接指定一個網址讓google指派權重。</p><p>但如果網址有帶參數，但是內容不一樣就要列在sitemap上或是產生個內部連結，如果沒有做的話，就浪費這個頁面被索引的機會了。</p><p>感謝閱讀，有問題歡迎留言!</p>]]></content>
    
    <summary type="html">
    
      轉址的概念，大概是宣告這個頁面要搬家到另一個頁面的意思，依照不同後端語言，各有不同的轉址寫法，但邏輯上都是一樣的，大概分為 301、302、307。若是有重複性內容處理的問題，那你就需要使用canonical處理。
    
    </summary>
    
      <category term="marketing" scheme="https://iandays.com/categories/marketing/"/>
    
    
      <category term="seo" scheme="https://iandays.com/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>Update Next.js 7、react 16 error and bug</title>
    <link href="https://iandays.com/2018/12/09/nextupdate/"/>
    <id>https://iandays.com/2018/12/09/nextupdate/</id>
    <published>2018-12-09T14:00:19.000Z</published>
    <updated>2019-06-08T04:41:19.033Z</updated>
    
    <content type="html"><![CDATA[<p>前陣子公司專案從next 3 更新到7、react也從15更新到16，希望能加快開發或佈署的速度，順便分享一下踩到了哪些的地雷。</p><p>首先呢，update react、react-dom、next，接下來開始測試一下local build，執行 <code>yarn build</code>，恩…，大概幾隻套件過舊，完全無法編譯，幸好這幾隻套件都有繼續維運，更新一下套件，重新繼續yarn build =&gt; yarn start。</p><p><img src="/images/next&react.png" alt="node.js" title="next &amp; react"></p><h2 id="產生-BUILD-ID"><a href="#產生-BUILD-ID" class="headerlink" title="產生 BUILD_ID"></a>產生 BUILD_ID</h2><p>發現run起來會抓不到 app.js，發現需要處理路徑問題，舊版next build出來的目錄，不會帶有BUILD_ID，只會在編譯的時候，拿取.next的BUILD_ID來當作路徑，之前是利用docker產生.BUILD_ID。但是新版的會直接寫在folder name上。要使用 generateBuildId 產生buildId，對了，我們buildId內容是git commit hash。</p><p><a href="https://nextjs.org/docs/#configuring-the-build-id" target="_blank" rel="noopener" title="generateBuildId">next.js generateBuildId </a></p><p>另外還有react更新，所以eslint相關插件也要更新到新版，花了<code>一些</code>(三天)時間再處理indent跟一些新版的eslint rule。</p><p>其餘並沒有改動太大，next.js 拋棄滿多舊有router處理，把專案上有用到部分都移除掉，還有title tag不在_document.js render。</p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>心裡想更新react、next還真是簡單，於是乎信心滿滿的更新到正式機上，但是，才發現事情沒有我想的這麼簡單。</p><p>當天晚上發現各種error、bug相繼發生，因為更新幅度非常大，需要花滿多時間判斷問題發生在哪個部分。</p><h2 id="next-js-router-bug"><a href="#next-js-router-bug" class="headerlink" title="next.js router bug"></a>next.js router bug</h2><p>發現一個非常嚴重的問題，Safari點選網頁上的連結到外部網站，在返回頁面回來，next 會直接導引到error page。<br>( 到我發文這天都沒修復掉，持續有人回報。 )</p><p><a href="https://github.com/zeit/next.js/issues/4103" target="_blank" rel="noopener" title="next.js safari bug ">next.js safari bug </a></p><p>next.js有個用法，建立_app.js，當作各個 pages/yourpath.js 共用的render point，我在這邊處理不同路徑共用title tag，_app.js需要依靠 pages/path.js 傳入資料，我就使用了getInitialProps 來處理server side call api取得的資料。</p><p>但是問題發生在 Safari 返回頁面，會使用之前的cache，並且不對server做請求，返回頁面會執行 getInitialProps 但是取不到 server side拿到的資料，所以資料會錯誤，導致錯誤發生。</p><p>目前看起來問題還在，這邊修復方法是，直接拉掉getInitialProps取server side資料，改到內層去render title。</p><h2 id="react-server、client-side-HTML-不同步"><a href="#react-server、client-side-HTML-不同步" class="headerlink" title="react server、client side HTML 不同步"></a>react server、client side HTML 不同步</h2><p>這是react 16再處理server side 到 client side render畫面的邏輯修改，為了增加render效能，react拋棄的比對server side to client html比對，官方建議server side 跟 client side的html要盡量保持一致。如果要有不一樣的話，建議在componentDidMount setState處理畫面更新。</p><p>發現部分的html畫卡在server side render layout，修復方法就利用server side 跟client side用不同的key值，讓react比對node做更新。但是如果要更新dangerouslySetInnerHTML用key方法也沒用，目前hotfix作法是兩邊用不同的html tag強更新，之後會改為componentDisMount更新。</p><h3 id="react-16-官方宣告"><a href="#react-16-官方宣告" class="headerlink" title="react 16 官方宣告"></a>react 16 官方宣告</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="keyword">In</span> general, we don’t recommend that you render different content on the<span class="built_in"> client </span>versus the server, but it can be useful <span class="keyword">in</span> some cases (e.g. timestamps).</span><br><span class="line">However, it’s dangerous <span class="keyword">to</span> have missing nodes on the<span class="built_in"> server </span>render as this might cause sibling nodes <span class="keyword">to</span> be created with incorrect attributes.</span><br></pre></td></tr></table></figure><p><a href="https://reactjs.org/blog/2017/09/26/react-v16.0.html#better-server-side-rendering" target="_blank" rel="noopener" title="Better server-side rendering ">Better server-side rendering </a></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>更新大概花了2週左右時間，大部分時間都在調整next config，原先更新是為了使用react 16新語法，還有希望能加速專案build deploy的速度。結果next這部分是有稍快一點，但主要優點還是在於react語法，方便我們在開發上處理更多問題，還有跟上react更新腳步，未來希望能夠導入react hooks。</p><p>很多狀況在測試階段都沒有察覺，不幸的release後發現很多問題…，幸好都有找到原因修復掉。</p>]]></content>
    
    <summary type="html">
    
      前陣子公司專案從next3更新到7、react也從15更新到16，希望能加快開發或佈署的速度，順便分享一下踩到了哪些的地雷。
    
    </summary>
    
      <category term="javascript" scheme="https://iandays.com/categories/javascript/"/>
    
    
      <category term="react.js" scheme="https://iandays.com/tags/react-js/"/>
    
  </entry>
  
  <entry>
    <title>結構化資料SEO 優化顯示搜尋結果</title>
    <link href="https://iandays.com/2018/11/25/structuredseo/"/>
    <id>https://iandays.com/2018/11/25/structuredseo/</id>
    <published>2018-11-25T09:28:59.000Z</published>
    <updated>2019-06-08T04:44:20.686Z</updated>
    
    <content type="html"><![CDATA[<p>過去，搜尋引擎難以理解網站的內容屬性，這時就依靠結構化資料(structured data)，這是Google、Yahoo、Bing等搜尋引擎根據schema.org制定的標記，共同的去支援。這些標記多半是關於網站內容的一些分類，麵包屑(breadcrumb)、文章(article)、活動(event)、影片(video)等等。</p><p><img src="/images/structureddata.png" alt="structureddata" title="structureddata"></p><p>當你網站有依照規範使用這些標記，就會有助於搜尋引擎理解網站的內容。最重要、也最有回饋感的是，會直接讓網站在搜尋結果顯示更不一樣，間接地幫助提高網站點擊率。google官方有非常詳盡的支援標籤，以及使用過後搜尋結果的變化。</p><p>接下來會分享些使用標籤的範例、心得。</p><p>google介紹 : <a href="https://developers.google.com/search/docs/guides/intro-structured-data" target="_blank" rel="noopener" title="google structured data info">google structured data info</a></p><p>google 支援標籤 : <a href="https://developers.google.com/search/docs/data-types/article" target="_blank" rel="noopener" title="google support structured data">google support structured data</a></p><h2 id="結構化標記語法"><a href="#結構化標記語法" class="headerlink" title="結構化標記語法"></a>結構化標記語法</h2><p>有三種語法可以使用，分別為JSON-LD(google推薦)、Microdata、RDFa，JSON-LD是javascript的語法類型，這只是javascript的資料所以不會顯示在畫面上，Microdata則是在html上標記，所以就需要依賴實際存在的html來加入，RDFa類似Microdata，是基於html5的標記，但語法與Microdata不大相同，但邏輯非常類似。</p><p>我個人是比較喜歡用JSON-LD的語法，因為比較簡潔好讀寫，看下面範例比較應該很好理解。google官方是表示三種方法並沒有差異，選擇方便使用的語法即可，但是提醒一下滿多屬性並不支援Microdata。</p><p>稍微介紹一下JSON資料的概念，大概就是 key -&gt; value，key可以當作名稱，value則當作值。{ } 稱作為物件，相同一筆的資料都會包覆在這個符號內，[ ] 則是代表陣列，多筆資料的意思。</p><ul><li><p>JSON-LD Course範例</p><figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="comment">"application/ld+json"</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">"@context"</span>: <span class="comment">"http://schema.org/"</span>,</span><br><span class="line">  <span class="comment">"@type"</span>: <span class="comment">"schema:Course"</span>,</span><br><span class="line">  <span class="comment">"name"</span>: <span class="comment">"The Data Scientist's Toolbox"</span>,</span><br><span class="line">  <span class="comment">"description"</span>: <span class="comment">"In this course you will get an introduction </span></span><br><span class="line"><span class="comment">                  to the main tools and ideas in the </span></span><br><span class="line"><span class="comment">                  data scientist's toolbox..."</span>,</span><br><span class="line">  <span class="comment">"hasCourseInstance"</span>: &#123;</span><br><span class="line">    <span class="comment">"@type"</span>: <span class="comment">"CourseInstance"</span>,</span><br><span class="line">    <span class="comment">"courseMode"</span>: [<span class="comment">"MOOC"</span>,<span class="comment">"online"</span>],</span><br><span class="line">    <span class="comment">"endDate"</span>: <span class="comment">"March 21"</span>,</span><br><span class="line">    <span class="comment">"startDate"</span>: <span class="comment">"February 15"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>RDFa Course範例</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">vocab</span>=<span class="string">"http://schema.org/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">typeof</span>=<span class="string">"Course"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">property</span>=<span class="string">"name"</span>&gt;</span>The Data Scientist's Toolbox<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>About this Course<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">property</span>=<span class="string">"description"</span>&gt;</span></span><br><span class="line">       In this course you will get an introduction to the main tools and </span><br><span class="line">       ideas in the data scientist's toolbox...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">rel</span>=<span class="string">"hasCourseInstance"</span> <span class="attr">typeof</span>=<span class="string">"CourseInstance"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"courseMode"</span> <span class="attr">content</span>=<span class="string">"MOOC"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"courseMode"</span> <span class="attr">content</span>=<span class="string">"online"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Session dates<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">property</span>=<span class="string">"startDate"</span>&gt;</span>February 15<span class="tag">&lt;/<span class="name">span</span>&gt;</span> -</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">property</span>=<span class="string">"endDate"</span>&gt;</span>March 21<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="breadcrumb-標記"><a href="#breadcrumb-標記" class="headerlink" title="breadcrumb 標記"></a>breadcrumb 標記</h2><p>最實用也最常用的莫過於麵包屑了，通常網站內容都會有不同的分類，例如說今天有某篇ga的文章歸類在marketing，那結構大概會是 marketing › ，俗稱麵包屑。再來來使用JSON-LD方法來標記。</p><p>首先使用@content來宣告使用結構化標記，再來以@type來使用標籤類型BreadcrumbList，再以陣列[] 來列出多筆，第一筆資料會是marketing，position代表排在第一位，name列上marketing，item則列上網址。以此類推往下增加下去，</p><ul><li>JSON-LD breadcrumb<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/ld+json"</span>&gt;</span></span></span><br><span class="line"><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">  <span class="string">"@context"</span>: <span class="string">"http://schema.org"</span>,</span></span><br><span class="line"><span class="xquery">  // use <span class="keyword">schema</span> type BreadcrumbList</span></span><br><span class="line"><span class="xquery">  <span class="string">"@type"</span>: <span class="string">"BreadcrumbList"</span>,</span></span><br><span class="line"><span class="xquery">  // use <span class="keyword">array</span> <span class="keyword">as</span> list</span></span><br><span class="line"><span class="xquery">  //<span class="built_in"> key</span><span class="built_in"> name</span> <span class="literal">is</span> itemListElement</span></span><br><span class="line"><span class="xquery">  <span class="string">"itemListElement"</span>: [&#123;</span></span><br><span class="line"><span class="xquery">    <span class="string">"@type"</span>: <span class="string">"ListItem"</span>,</span></span><br><span class="line"><span class="xquery">    <span class="string">"position"</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="xquery">    <span class="string">"name"</span>: <span class="string">"marketing"</span>,</span></span><br><span class="line"><span class="xquery">    <span class="string">"item"</span>: <span class="string">"https://iandays.com/categories/marketing/"</span></span></span><br><span class="line"><span class="xquery">  &#125;</span><span class="xml">,</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">    <span class="string">"@type"</span>: <span class="string">"ListItem"</span>,</span></span><br><span class="line"><span class="xquery">    <span class="string">"position"</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="xquery">    <span class="string">"name"</span>: <span class="string">"Google Analytics 工作階段介紹、定義"</span>,</span></span><br><span class="line"><span class="xquery">    <span class="string">"item"</span>: <span class="string">"https://iandays.com/2018/07/30/gasession/index.html"</span></span></span><br><span class="line"><span class="xquery">  &#125;</span><span class="xml">]</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="測試結構化資料"><a href="#測試結構化資料" class="headerlink" title="測試結構化資料"></a>測試結構化資料</h2><p>進入網站 <a href="https://search.google.com/structured-data/testing-tool" target="_blank" rel="noopener" title="google 測試結構化資料">google 測試結構化資料</a>，點擊輸入程式碼片段，輸入剛剛那段JSON，點擊下方驗證後，就可以看到語法有沒有成功，如果有錯誤的話，上面會提供修正的方式。</p><p><img src="/images/structuretootl.png" alt="structured data tool" title="structured data tool"></p><p>之後再進入search console，提交網站索引或是sitemap，等待搜尋引擎更新索引就大功告成了。</p><p><img src="/images/breadcrumb.png" alt="structured breadcrumb" title="structured breadcrumb"></p><h2 id="搜尋結果錨點-非structured-data"><a href="#搜尋結果錨點-非structured-data" class="headerlink" title="搜尋結果錨點 (非structured data)"></a>搜尋結果錨點 (非structured data)</h2><p>最後再提供一個最近特別用到修改，下方的搜尋結果出現頁面內的錨點，原本blog頁面架構就有用id錨點)，查閱結構化資料過後發現，並沒有錨點可以使用的功能，於是我針對搜尋結果有出現錨點的頁面都看過一次html。</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">"#錨點名稱"</span>&gt;</span></span><span class="template-variable">&#123;&#123;content&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>發現都有相同概念，就是要當你搜尋結果要出現錨點，頁面上就必須要有實體連結可以點過去。於是我就做了頁面左邊的那個點擊scroll區塊，大約過了一週後搜尋結果就開始出現錨點。雖然常常一下只顯示麵包屑，一下又只顯示錨點…。</p><p><img src="/images/searchlink.png" alt="structured searchlink" title="structured searchlink"></p><ul><li>目錄範例<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"toc-article"</span> id=<span class="string">"toc"</span>&gt;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">"toc-title"</span>&gt;文章目錄&lt;/div&gt;</span><br><span class="line">  &lt;ol <span class="keyword">class</span>=<span class="string">"toc"</span>&gt;</span><br><span class="line">    &lt;li <span class="keyword">class</span>=<span class="string">"toc-item toc-level-2"</span>&gt;</span><br><span class="line">      &lt;a <span class="keyword">class</span>=<span class="string">"toc-link"</span> href=<span class="string">"#Google-analytics-設定事件"</span>&gt;</span><br><span class="line">        &lt;span <span class="keyword">class</span>=<span class="string">"toc-text"</span>&gt;Google analytics 設定事件&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li <span class="keyword">class</span>=<span class="string">"toc-item toc-level-2"</span>&gt;</span><br><span class="line">      &lt;a <span class="keyword">class</span>=<span class="string">"toc-link"</span> href=<span class="string">"#實作測試"</span>&gt;</span><br><span class="line">        &lt;span <span class="keyword">class</span>=<span class="string">"toc-text"</span>&gt;實作測試&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li <span class="keyword">class</span>=<span class="string">"toc-item toc-level-2"</span>&gt;</span><br><span class="line">      &lt;a <span class="keyword">class</span>=<span class="string">"toc-link"</span> href=<span class="string">"#ga-event產生器"</span>&gt;</span><br><span class="line">        &lt;span <span class="keyword">class</span>=<span class="string">"toc-text"</span>&gt;ga <span class="keyword">event</span>產生器&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    ...</span><br><span class="line">  &lt;/ol&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>結構化資料出了大概3、4年了，突然想到search console有螢光筆工具，它可以直接畫記結構資料屬性，我在3年前有用過，完成但搜尋結果並沒任何變化。</p><p>剩下還有很多的標籤屬性(event、product、recipe、video、article等等)，其實也沒有技術難度，就依照官方文件範例照著填入需要的資料就好了，唯一難處可能是缺資料XD。</p><p>再分享個最近實作結構化資料經驗，完成標記提交網站索引後，大概都要一週後才會漸漸地有變化。</p>]]></content>
    
    <summary type="html">
    
      當你網站有依照規範使用結構化資料，最重要、也最有回饋感的是，會直接讓網站在搜尋結果顯示更不一樣，間接地幫助提高網站點擊率，也有助於搜尋引擎理解網站的內容。
    
    </summary>
    
      <category term="marketing" scheme="https://iandays.com/categories/marketing/"/>
    
    
      <category term="seo" scheme="https://iandays.com/tags/seo/"/>
    
  </entry>
  
</feed>
